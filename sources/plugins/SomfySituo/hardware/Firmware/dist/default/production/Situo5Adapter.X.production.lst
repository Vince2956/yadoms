

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 13 21:26:31 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F688
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F688 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0007                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000E                     	;# 
    86  000E                     	;# 
    87  000F                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0014                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0087                     	;# 
   104  008C                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0095                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0007                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0087                     	;# 
   152  008C                     	;# 
   153  008E                     	;# 
   154  008F                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0095                     	;# 
   158  0095                     	;# 
   159  0096                     	;# 
   160  0096                     	;# 
   161  0097                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171                           
   172                           	psect	idataBANK0
   173  0735                     __pidataBANK0:	
   174                           
   175                           ;initializer for _scaleCount
   176  0735  3404               	retlw	4
   177  0736  3400               	retlw	0
   178                           
   179                           ;initializer for _scaler
   180  0737  3404               	retlw	4
   181  0738  3400               	retlw	0
   182                           
   183                           ;initializer for _tCount
   184  0739  3403               	retlw	3
   185  073A  3400               	retlw	0
   186                           
   187                           ;initializer for _RXIN
   188  073B  3403               	retlw	3
   189                           
   190                           ;initializer for _Err_Code
   191  073C  3401               	retlw	1
   192                           
   193                           ;initializer for _NewTs232Frame
   194  073D  3401               	retlw	1
   195  0014                     _RCREG	set	20
   196  0015                     _TXREG	set	21
   197  0011                     _BAUDCTLbits	set	17
   198  0016                     _TXSTA	set	22
   199  0017                     _RCSTA	set	23
   200  0013                     _SPBRG	set	19
   201  0019                     _CMCON0	set	25
   202  001F                     _ADCON0	set	31
   203  000B                     _INTCON	set	11
   204  0001                     _TMR0	set	1
   205  0017                     _RCSTAbits	set	23
   206  000C                     _PIR1bits	set	12
   207  000B                     _INTCONbits	set	11
   208  0065                     _RCIF	set	101
   209  0061                     _TXIF	set	97
   210  003C                     _RC4	set	60
   211  003D                     _RC5	set	61
   212  002C                     _RA4	set	44
   213  00BC                     _CREN	set	188
   214  00BF                     _SPEN	set	191
   215  002D                     _RA5	set	45
   216  003A                     _RC2	set	58
   217  0039                     _RC1	set	57
   218  0038                     _RC0	set	56
   219  003B                     _RC3	set	59
   220  002B                     _RA3	set	43
   221  002A                     _RA2	set	42
   222  0029                     _RA1	set	41
   223  0028                     _RA0	set	40
   224  0081                     _OPTION_REGbits	set	129
   225  0087                     _TRISC	set	135
   226  0085                     _TRISA	set	133
   227  0091                     _ANSEL	set	145
   228  008C                     _PIE1bits	set	140
   229                           
   230                           	psect	strings
   231  0530                     __pstrings:	
   232  0530                     stringtab:	
   233  0530                     __stringtab:	
   234  0530                     stringcode:	
   235                           ;	String table - string pointers are 1 byte each
   236                           
   237  0530                     stringdir:	
   238  0530  3005               	movlw	high stringdir
   239  0531  008A               	movwf	10
   240  0532  0804               	movf	4,w
   241  0533  0A84               	incf	4,f
   242  0534  0782               	addwf	2,f
   243  0535                     __stringbase:	
   244  0535  3400               	retlw	0
   245  0536                     __end_of__stringtab:	
   246  0536                     STR_8:	
   247  0536  3473               	retlw	115	;'s'
   248  0537  3453               	retlw	83	;'S'
   249  0538  3469               	retlw	105	;'i'
   250  0539  3474               	retlw	116	;'t'
   251  053A  3475               	retlw	117	;'u'
   252  053B  346F               	retlw	111	;'o'
   253  053C  3435               	retlw	53	;'5'
   254  053D  342D               	retlw	45	;'-'
   255  053E  3476               	retlw	118	;'v'
   256  053F  3430               	retlw	48	;'0'
   257  0540  3431               	retlw	49	;'1'
   258  0541  342E               	retlw	46	;'.'
   259  0542  3430               	retlw	48	;'0'
   260  0543  3431               	retlw	49	;'1'
   261  0544  3400               	retlw	0
   262  0545                     STR_5:	
   263  0545  342F               	retlw	47	;'/'
   264  0546  344D               	retlw	77	;'M'
   265  0547  3475               	retlw	117	;'u'
   266  0548  346C               	retlw	108	;'l'
   267  0549  3474               	retlw	116	;'t'
   268  054A  3469               	retlw	105	;'i'
   269  054B  3443               	retlw	67	;'C'
   270  054C  3468               	retlw	104	;'h'
   271  054D  3461               	retlw	97	;'a'
   272  054E  346E               	retlw	110	;'n'
   273  054F  346E               	retlw	110	;'n'
   274  0550  3465               	retlw	101	;'e'
   275  0551  346C               	retlw	108	;'l'
   276  0552  343A               	retlw	58	;':'
   277  0553  3400               	retlw	0
   278  0554                     STR_7:	
   279  0554  3463               	retlw	99	;'c'
   280  0555  342D               	retlw	45	;'-'
   281  0556  3444               	retlw	68	;'D'
   282  0557  3465               	retlw	101	;'e'
   283  0558  3462               	retlw	98	;'b'
   284  0559  3475               	retlw	117	;'u'
   285  055A  3467               	retlw	103	;'g'
   286  055B  344F               	retlw	79	;'O'
   287  055C  3446               	retlw	70	;'F'
   288  055D  3446               	retlw	70	;'F'
   289  055E  342D               	retlw	45	;'-'
   290  055F  3400               	retlw	0
   291  0560                     STR_3:	
   292  0560  342F               	retlw	47	;'/'
   293  0561  3466               	retlw	102	;'f'
   294  0562  3469               	retlw	105	;'i'
   295  0563  3472               	retlw	114	;'r'
   296  0564  3473               	retlw	115	;'s'
   297  0565  3474               	retlw	116	;'t'
   298  0566  3463               	retlw	99	;'c'
   299  0567  3461               	retlw	97	;'a'
   300  0568  346C               	retlw	108	;'l'
   301  0569  346C               	retlw	108	;'l'
   302  056A  343A               	retlw	58	;':'
   303  056B  3400               	retlw	0
   304  056C                     STR_6:	
   305  056C  3463               	retlw	99	;'c'
   306  056D  342D               	retlw	45	;'-'
   307  056E  3444               	retlw	68	;'D'
   308  056F  3465               	retlw	101	;'e'
   309  0570  3462               	retlw	98	;'b'
   310  0571  3475               	retlw	117	;'u'
   311  0572  3467               	retlw	103	;'g'
   312  0573  344F               	retlw	79	;'O'
   313  0574  344E               	retlw	78	;'N'
   314  0575  342D               	retlw	45	;'-'
   315  0576  3400               	retlw	0
   316  0577                     STR_2:	
   317  0577  3466               	retlw	102	;'f'
   318  0578  3469               	retlw	105	;'i'
   319  0579  3472               	retlw	114	;'r'
   320  057A  3473               	retlw	115	;'s'
   321  057B  3474               	retlw	116	;'t'
   322  057C  3463               	retlw	99	;'c'
   323  057D  3461               	retlw	97	;'a'
   324  057E  346C               	retlw	108	;'l'
   325  057F  346C               	retlw	108	;'l'
   326  0580  3400               	retlw	0
   327  0581                     STR_4:	
   328  0581  344E               	retlw	78	;'N'
   329  0582  3462               	retlw	98	;'b'
   330  0583  3443               	retlw	67	;'C'
   331  0584  3468               	retlw	104	;'h'
   332  0585  3461               	retlw	97	;'a'
   333  0586  346E               	retlw	110	;'n'
   334  0587  3467               	retlw	103	;'g'
   335  0588  3465               	retlw	101	;'e'
   336  0589  3400               	retlw	0
   337  058A                     STR_9:	
   338  058A  3453               	retlw	83	;'S'
   339  058B  3474               	retlw	116	;'t'
   340  058C  3461               	retlw	97	;'a'
   341  058D  3472               	retlw	114	;'r'
   342  058E  3474               	retlw	116	;'t'
   343  058F  3400               	retlw	0
   344  0546                     
   345                           ; #config settings
   346  0000                     
   347                           	psect	cinit
   348  0013                     start_initialization:	
   349  0013                     __initialization:	
   350                           
   351                           ; Initialize objects allocated to BANK0
   352  0013  1383               	bcf	3,7	;select IRP bank0
   353  0014  306A               	movlw	low (__pdataBANK0+9)
   354  0015  00FD               	movwf	btemp+-1
   355  0016  3007               	movlw	high __pidataBANK0
   356  0017  00FE               	movwf	btemp
   357  0018  3035               	movlw	low __pidataBANK0
   358  0019  00FF               	movwf	btemp+1
   359  001A  3061               	movlw	low __pdataBANK0
   360  001B  0084               	movwf	4
   361  001C  118A  26EB  118A   	fcall	init_ram0
   362                           
   363                           ; Clear objects allocated to BANK0
   364  001F  3050               	movlw	low __pbssBANK0
   365  0020  0084               	movwf	4
   366  0021  3061               	movlw	low (__pbssBANK0+17)
   367  0022  118A  273E         	fcall	clear_ram0
   368  0024                     end_of_initialization:	
   369                           ;End of C runtime variable initialization code
   370                           
   371  0024                     __end_of__initialization:	
   372  0024  0183               	clrf	3
   373  0025  118A  2CC9         	ljmp	_main	;jump to C main() function
   374                           
   375                           	psect	bssBANK0
   376  0050                     __pbssBANK0:	
   377  0050                     _Rs232Frame:	
   378  0050                     	ds	7
   379  0057                     _flagRXOverrunError:	
   380  0057                     	ds	2
   381  0059                     _flagRXFramingError:	
   382  0059                     	ds	2
   383  005B                     _lastActiveChannel:	
   384  005B                     	ds	2
   385  005D                     _channel:	
   386  005D                     	ds	2
   387  005F                     _DebugMode:	
   388  005F                     	ds	1
   389  0060                     _LenRs232:	
   390  0060                     	ds	1
   391                           
   392                           	psect	dataBANK0
   393  0061                     __pdataBANK0:	
   394  0061                     _scaleCount:	
   395  0061                     	ds	2
   396  0063                     _scaler:	
   397  0063                     	ds	2
   398  0065                     _tCount:	
   399  0065                     	ds	2
   400  0067                     _RXIN:	
   401  0067                     	ds	1
   402  0068                     _Err_Code:	
   403  0068                     	ds	1
   404  0069                     _NewTs232Frame:	
   405  0069                     	ds	1
   406                           
   407                           	psect	inittext
   408  06E7                     init_fetch0:	
   409                           ;	Called with low address in FSR and high address in W
   410                           
   411  06E7  087E               	movf	126,w
   412  06E8  008A               	movwf	10
   413  06E9  087F               	movf	127,w
   414  06EA  0082               	movwf	2
   415  06EB                     init_ram0:	
   416                           ;Called with:
   417                           ;	high address of idata address in btemp 
   418                           ;	low address of idata address in btemp+1 
   419                           ;	low address of data in FSR
   420                           ;	high address + 1 of data in btemp-1
   421                           
   422  06EB  26E7  118A         	fcall	init_fetch0
   423  06ED  0080               	movwf	0
   424  06EE  0A84               	incf	4,f
   425  06EF  0804               	movf	4,w
   426  06F0  067D               	xorwf	125,w
   427  06F1  1903               	btfsc	3,2
   428  06F2  3400               	retlw	0
   429  06F3  0AFF               	incf	127,f
   430  06F4  1903               	btfsc	3,2
   431  06F5  0AFE               	incf	126,f
   432  06F6  2EEB               	goto	init_ram0
   433                           
   434                           	psect	clrtext
   435  073E                     clear_ram0:	
   436                           ;	Called with FSR containing the base address, and
   437                           ;	W with the last address+1
   438                           
   439  073E  0064               	clrwdt	;clear the watchdog before getting into this loop
   440  073F                     clrloop0:	
   441  073F  0180               	clrf	0	;clear RAM location pointed to by FSR
   442  0740  0A84               	incf	4,f	;increment pointer
   443  0741  0604               	xorwf	4,w	;XOR with final address
   444  0742  1903               	btfsc	3,2	;have we reached the end yet?
   445  0743  3400               	retlw	0	;all done for this memory range, return
   446  0744  0604               	xorwf	4,w	;XOR again to restore value
   447  0745  2F3F               	goto	clrloop0	;do the next byte
   448                           
   449                           	psect	cstackCOMMON
   450  0070                     __pcstackCOMMON:	
   451  0070                     ?_isdigit:	
   452  0070                     ?_printc_tx:	
   453                           ; 1 bit 
   454                           
   455  0070                     ?_getch:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ??_getch:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_fast_delay_ms:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_ProcessReadChannel:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_processCmdIN:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_processRXIN:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_ISR:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_putch:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?i1_flashAliveLED:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?i1_itoc:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?i1_putch:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ??i1_putch:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     i1putch@byte:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     i1flashAliveLED@toggleCount:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     i1itoc@i:	
   498                           ; 2 bytes @ 0x0
   499                           
   500                           
   501                           ; 2 bytes @ 0x0
   502  0070                     	ds	2
   503  0072                     ??i1_itoc:	
   504  0072                     ?i1_printci_tx:	
   505                           ; 1 bytes @ 0x2
   506                           
   507  0072                     i1flashAliveLED@changeScaler:	
   508                           ; 1 bytes @ 0x2
   509                           
   510  0072                     i1printci_tx@i:	
   511                           ; 2 bytes @ 0x2
   512                           
   513                           
   514                           ; 2 bytes @ 0x2
   515  0072                     	ds	2
   516  0074                     ??i1_flashAliveLED:	
   517  0074                     ??i1_printci_tx:	
   518                           ; 1 bytes @ 0x4
   519                           
   520  0074                     i1printci_tx@c:	
   521                           ; 1 bytes @ 0x4
   522                           
   523                           
   524                           ; 1 bytes @ 0x4
   525  0074                     	ds	1
   526  0075                     ??_processRXIN:	
   527                           
   528                           ; 1 bytes @ 0x5
   529  0075                     	ds	2
   530  0077                     processRXIN@c_in:	
   531                           
   532                           ; 1 bytes @ 0x7
   533  0077                     	ds	1
   534  0078                     ??_ISR:	
   535                           
   536                           ; 1 bytes @ 0x8
   537  0078                     	ds	5
   538  007D                     ISR@c:	
   539                           
   540                           ; 1 bytes @ 0xD
   541  007D                     	ds	1
   542                           
   543                           	psect	cstackBANK0
   544  0020                     __pcstackBANK0:	
   545  0020                     ??_isdigit:	
   546  0020                     ?_delay_ms:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0020                     ??_fast_delay_ms:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0020                     ?_flashAliveLED:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0020                     ?_itoc:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0020                     ??_putch:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0020                     ?_ctoi:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0020                     ?___wmul:	
   565                           ; 2 bytes @ 0x0
   566                           
   567  0020                     putch@byte:	
   568                           ; 2 bytes @ 0x0
   569                           
   570  0020                     _isdigit$573:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0020                     delay_ms@x:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0020                     flashAliveLED@toggleCount:	
   577                           ; 2 bytes @ 0x0
   578                           
   579  0020                     itoc@i:	
   580                           ; 2 bytes @ 0x0
   581                           
   582  0020                     ___wmul@multiplier:	
   583                           ; 2 bytes @ 0x0
   584                           
   585                           
   586                           ; 2 bytes @ 0x0
   587  0020                     	ds	1
   588  0021                     ?_print_tx:	
   589  0021                     ??_printc_tx:	
   590                           ; 1 bytes @ 0x1
   591                           
   592  0021                     printc_tx@c:	
   593                           ; 1 bytes @ 0x1
   594                           
   595  0021                     isdigit@c:	
   596                           ; 1 bytes @ 0x1
   597                           
   598  0021                     print_tx@len:	
   599                           ; 1 bytes @ 0x1
   600                           
   601                           
   602                           ; 2 bytes @ 0x1
   603  0021                     	ds	1
   604  0022                     ?_printci_tx:	
   605  0022                     ??_delay_ms:	
   606                           ; 1 bytes @ 0x2
   607                           
   608  0022                     ??_itoc:	
   609                           ; 1 bytes @ 0x2
   610                           
   611  0022                     flashAliveLED@changeScaler:	
   612                           ; 1 bytes @ 0x2
   613                           
   614  0022                     printci_tx@i:	
   615                           ; 2 bytes @ 0x2
   616                           
   617  0022                     ___wmul@multiplicand:	
   618                           ; 2 bytes @ 0x2
   619                           
   620                           
   621                           ; 2 bytes @ 0x2
   622  0022                     	ds	1
   623  0023                     ??_print_tx:	
   624  0023                     ??_ctoi:	
   625                           ; 1 bytes @ 0x3
   626                           
   627  0023                     ctoi@c:	
   628                           ; 1 bytes @ 0x3
   629                           
   630  0023                     delay_ms@i:	
   631                           ; 1 bytes @ 0x3
   632                           
   633  0023                     print_tx@i:	
   634                           ; 2 bytes @ 0x3
   635                           
   636                           
   637                           ; 2 bytes @ 0x3
   638  0023                     	ds	1
   639  0024                     ??_printci_tx:	
   640  0024                     ??_flashAliveLED:	
   641                           ; 1 bytes @ 0x4
   642                           
   643  0024                     ??___wmul:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  0024                     printci_tx@c:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0024                     ___wmul@product:	
   650                           ; 1 bytes @ 0x4
   651                           
   652                           
   653                           ; 2 bytes @ 0x4
   654  0024                     	ds	1
   655  0025                     ?_CommandChannel:	
   656  0025                     print_tx@str:	
   657                           ; 1 bytes @ 0x5
   658                           
   659  0025                     CommandChannel@d:	
   660                           ; 1 bytes @ 0x5
   661                           
   662                           
   663                           ; 4 bytes @ 0x5
   664  0025                     	ds	1
   665  0026                     ??_ProcessReadChannel:	
   666  0026                     ?_pow:	
   667                           ; 1 bytes @ 0x6
   668                           
   669  0026                     pow@a:	
   670                           ; 2 bytes @ 0x6
   671                           
   672                           
   673                           ; 2 bytes @ 0x6
   674  0026                     	ds	2
   675  0028                     pow@b:	
   676                           
   677                           ; 2 bytes @ 0x8
   678  0028                     	ds	1
   679  0029                     ??_CommandChannel:	
   680                           
   681                           ; 1 bytes @ 0x9
   682  0029                     	ds	1
   683  002A                     ??_pow:	
   684                           
   685                           ; 1 bytes @ 0xA
   686  002A                     	ds	1
   687  002B                     pow@result:	
   688                           
   689                           ; 2 bytes @ 0xB
   690  002B                     	ds	2
   691  002D                     pow@i:	
   692                           
   693                           ; 2 bytes @ 0xD
   694  002D                     	ds	2
   695  002F                     ?___lmul:	
   696  002F                     ___lmul@multiplier:	
   697                           ; 4 bytes @ 0xF
   698                           
   699                           
   700                           ; 4 bytes @ 0xF
   701  002F                     	ds	3
   702  0032                     ?_CmdMultiChannel:	
   703  0032                     CmdMultiChannel@chanToActive:	
   704                           ; 1 bytes @ 0x12
   705                           
   706                           
   707                           ; 2 bytes @ 0x12
   708  0032                     	ds	1
   709  0033                     ___lmul@multiplicand:	
   710                           
   711                           ; 4 bytes @ 0x13
   712  0033                     	ds	1
   713  0034                     CmdMultiChannel@delay:	
   714                           
   715                           ; 4 bytes @ 0x14
   716  0034                     	ds	3
   717  0037                     ??___lmul:	
   718                           
   719                           ; 1 bytes @ 0x17
   720  0037                     	ds	1
   721  0038                     ??_CmdMultiChannel:	
   722  0038                     ___lmul@product:	
   723                           ; 1 bytes @ 0x18
   724                           
   725                           
   726                           ; 4 bytes @ 0x18
   727  0038                     	ds	4
   728  003C                     CmdMultiChannel@i:	
   729                           
   730                           ; 2 bytes @ 0x1C
   731  003C                     	ds	2
   732  003E                     CmdMultiChannel@nbChange:	
   733                           
   734                           ; 2 bytes @ 0x1E
   735  003E                     	ds	2
   736  0040                     ??_processCmdIN:	
   737                           
   738                           ; 1 bytes @ 0x20
   739  0040                     	ds	2
   740  0042                     processCmdIN@lenDelay:	
   741                           
   742                           ; 2 bytes @ 0x22
   743  0042                     	ds	2
   744  0044                     processCmdIN@selected_channel:	
   745                           
   746                           ; 2 bytes @ 0x24
   747  0044                     	ds	2
   748  0046                     processCmdIN@i:	
   749                           
   750                           ; 2 bytes @ 0x26
   751  0046                     	ds	2
   752  0048                     processCmdIN@my_delay:	
   753                           
   754                           ; 4 bytes @ 0x28
   755  0048                     	ds	4
   756  004C                     ?_main:	
   757  004C                     main@argc:	
   758                           ; 2 bytes @ 0x2C
   759                           
   760                           
   761                           ; 2 bytes @ 0x2C
   762  004C                     	ds	2
   763  004E                     main@argv:	
   764                           
   765                           ; 2 bytes @ 0x2E
   766  004E                     	ds	2
   767  0050                     ??_main:	
   768                           
   769                           	psect	maintext
   770  04C9                     __pmaintext:	
   771                           ; 1 bytes @ 0x30
   772 ;;
   773 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   774 ;;
   775 ;; *************** function _main *****************
   776 ;; Defined at:
   777 ;;		line 583 in file "main.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  argc            2   44[BANK0 ] int 
   780 ;;  argv            2   46[BANK0 ] PTR PTR unsigned char 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  input           1    0        unsigned char 
   783 ;; Return value:  Size  Location     Type
   784 ;;                  2   44[BANK0 ] int 
   785 ;; Registers used:
   786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : B00/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   792 ;;      Params:         0       4       0       0
   793 ;;      Locals:         0       0       0       0
   794 ;;      Temps:          0       0       0       0
   795 ;;      Totals:         0       4       0       0
   796 ;;Total ram usage:        4 bytes
   797 ;; Hardware stack levels required when called:    8
   798 ;; This function calls:
   799 ;;		_fast_delay_ms
   800 ;;		_flashAliveLED
   801 ;;		_print_tx
   802 ;;		_processCmdIN
   803 ;; This function is called by:
   804 ;;		Startup code after reset
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808                           
   809                           ;psect for function _main
   810  04C9                     _main:	
   811                           
   812                           ;main.c: 584: unsigned char input;
   813                           ;main.c: 586: INTCON=0;
   814                           
   815                           ;incstack = 0
   816                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   817  04C9  018B               	clrf	11	;volatile
   818                           
   819                           ;main.c: 587: ANSEL = 0x00;
   820  04CA  1683               	bsf	3,5	;RP0=1, select bank1
   821  04CB  1303               	bcf	3,6	;RP1=0, select bank1
   822  04CC  0191               	clrf	17	;volatile
   823                           
   824                           ;main.c: 588: TRISA = 0xCF;
   825  04CD  30CF               	movlw	207
   826  04CE  0085               	movwf	5	;volatile
   827                           
   828                           ;main.c: 589: TRISC = 0xE0;
   829  04CF  30E0               	movlw	224
   830  04D0  0087               	movwf	7	;volatile
   831                           
   832                           ;main.c: 590: ADCON0 = 0x00;
   833  04D1  1283               	bcf	3,5	;RP0=0, select bank0
   834  04D2  1303               	bcf	3,6	;RP1=0, select bank0
   835  04D3  019F               	clrf	31	;volatile
   836                           
   837                           ;main.c: 591: CMCON0 = 7;
   838  04D4  3007               	movlw	7
   839  04D5  0099               	movwf	25	;volatile
   840                           
   841                           ;main.c: 598: RC3 = 1;
   842  04D6  1587               	bsf	7,3	;volatile
   843                           
   844                           ;main.c: 599: RC1 = 1;
   845  04D7  1487               	bsf	7,1	;volatile
   846                           
   847                           ;main.c: 600: RC0 = 1;
   848  04D8  1407               	bsf	7,0	;volatile
   849                           
   850                           ;main.c: 601: RC2 = 1;
   851  04D9  1507               	bsf	7,2	;volatile
   852                           
   853                           ;main.c: 602: RA5 = 1;
   854  04DA  1685               	bsf	5,5	;volatile
   855                           
   856                           ;main.c: 603: OPTION_REGbits.T0CS = 0;
   857  04DB  1683               	bsf	3,5	;RP0=1, select bank1
   858  04DC  1303               	bcf	3,6	;RP1=0, select bank1
   859  04DD  1281               	bcf	1,5	;volatile
   860                           
   861                           ;main.c: 604: INTCONbits.T0IE = 0;
   862  04DE  128B               	bcf	11,5	;volatile
   863                           
   864                           ;main.c: 605: OPTION_REGbits.INTEDG = 0;
   865  04DF  1301               	bcf	1,6	;volatile
   866                           
   867                           ;main.c: 606: OPTION_REGbits.PSA = 0;
   868  04E0  1181               	bcf	1,3	;volatile
   869                           
   870                           ;main.c: 607: OPTION_REGbits.PS = 7;
   871  04E1  3007               	movlw	7
   872  04E2  0481               	iorwf	1,f	;volatile
   873                           
   874                           ;main.c: 608: INTCONbits.INTE = 0;
   875  04E3  120B               	bcf	11,4	;volatile
   876                           
   877                           ;main.c: 609: INTCONbits.RAIE = 0;
   878  04E4  118B               	bcf	11,3	;volatile
   879                           
   880                           ;main.c: 612: PIE1bits.TXIE = 0;
   881  04E5  108C               	bcf	12,1	;volatile
   882                           
   883                           ;main.c: 613: PIE1bits.RCIE = 1;
   884  04E6  168C               	bsf	12,5	;volatile
   885                           
   886                           ;main.c: 614: INTCONbits.PEIE = 1;
   887  04E7  170B               	bsf	11,6	;volatile
   888                           
   889                           ;main.c: 615: INTCONbits.GIE = 1;
   890  04E8  178B               	bsf	11,7	;volatile
   891                           
   892                           ;main.c: 618: RC5 = 1; RC4 = 1; SPBRG = ((int)(4000000L/(16UL * 9600) -1)); RCSTA = (0|0
      +                          x90); TXSTA = (0x4|0|0x20);
   893  04E9  1283               	bcf	3,5	;RP0=0, select bank0
   894  04EA  1303               	bcf	3,6	;RP1=0, select bank0
   895  04EB  1687               	bsf	7,5	;volatile
   896  04EC  1607               	bsf	7,4	;volatile
   897  04ED  3019               	movlw	25
   898  04EE  0093               	movwf	19	;volatile
   899  04EF  3090               	movlw	144
   900  04F0  0097               	movwf	23	;volatile
   901  04F1  3024               	movlw	36
   902  04F2  0096               	movwf	22	;volatile
   903                           
   904                           ;main.c: 619: print_tx("Start", 5);
   905  04F3  3005               	movlw	5
   906  04F4  00A1               	movwf	print_tx@len
   907  04F5  3000               	movlw	0
   908  04F6  00A2               	movwf	print_tx@len+1
   909  04F7  3055               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   910  04F8  118A  2620  118A   	fcall	_print_tx
   911                           
   912                           ;main.c: 620: flashAliveLED(10, 2);
   913  04FB  300A               	movlw	10
   914  04FC  1283               	bcf	3,5	;RP0=0, select bank0
   915  04FD  1303               	bcf	3,6	;RP1=0, select bank0
   916  04FE  00A0               	movwf	flashAliveLED@toggleCount
   917  04FF  3000               	movlw	0
   918  0500  00A1               	movwf	flashAliveLED@toggleCount+1
   919  0501  3002               	movlw	2
   920  0502  00A2               	movwf	flashAliveLED@changeScaler
   921  0503  3000               	movlw	0
   922  0504  00A3               	movwf	flashAliveLED@changeScaler+1
   923  0505  118A  2707  118A   	fcall	_flashAliveLED
   924  0508                     l243:	
   925                           ;main.c: 621: while(1) {
   926                           
   927  0508  0064               	clrwdt	;# 
   928                           
   929                           ;main.c: 624: if (INTCONbits.T0IE == 0 && BAUDCTLbits.RCIDL && NewTs232Frame == MSG_ANY)
   930  0509  1A8B               	btfsc	11,5	;volatile
   931  050A  2D26               	goto	l1792
   932  050B  1283               	bcf	3,5	;RP0=0, select bank0
   933  050C  1303               	bcf	3,6	;RP1=0, select bank0
   934  050D  1F11               	btfss	17,6	;volatile
   935  050E  2D26               	goto	l1792
   936  050F  0369               	decf	_NewTs232Frame,w
   937  0510  1D03               	btfss	3,2
   938  0511  2D26               	goto	l1792
   939                           
   940                           ;main.c: 625: {
   941                           ;main.c: 626: fast_delay_ms();
   942  0512  118A  271F  118A   	fcall	_fast_delay_ms
   943                           
   944                           ;main.c: 627: BAUDCTLbits.WUE = 1;
   945  0515  1283               	bcf	3,5	;RP0=0, select bank0
   946  0516  1303               	bcf	3,6	;RP1=0, select bank0
   947  0517  1491               	bsf	17,1	;volatile
   948  0518  0063               	sleep	;# 
   949                           
   950                           ;main.c: 630: flashAliveLED(2, 4);
   951  0519  3002               	movlw	2
   952  051A  1283               	bcf	3,5	;RP0=0, select bank0
   953  051B  1303               	bcf	3,6	;RP1=0, select bank0
   954  051C  00A0               	movwf	flashAliveLED@toggleCount
   955  051D  3000               	movlw	0
   956  051E  00A1               	movwf	flashAliveLED@toggleCount+1
   957  051F  3004               	movlw	4
   958  0520  00A2               	movwf	flashAliveLED@changeScaler
   959  0521  3000               	movlw	0
   960  0522  00A3               	movwf	flashAliveLED@changeScaler+1
   961  0523  118A  2707  118A   	fcall	_flashAliveLED
   962  0526                     l1792:	
   963                           
   964                           ;main.c: 631: }
   965                           ;main.c: 633: if (NewTs232Frame == MSG_COMPLETE)
   966  0526  3004               	movlw	4
   967  0527  1283               	bcf	3,5	;RP0=0, select bank0
   968  0528  1303               	bcf	3,6	;RP1=0, select bank0
   969  0529  0669               	xorwf	_NewTs232Frame,w
   970  052A  1D03               	btfss	3,2
   971  052B  2D08               	goto	l243
   972                           
   973                           ;main.c: 634: processCmdIN();
   974  052C  118A  2027  118A   	fcall	_processCmdIN
   975  052F  2D08               	goto	l243
   976  0530                     __end_of_main:	
   977                           ;main.c: 636: }
   978                           ;main.c: 638: return (0);
   979                           ;	Return value of _main is never used
   980                           
   981                           
   982                           	psect	text1
   983  0027                     __ptext1:	
   984 ;; *************** function _processCmdIN *****************
   985 ;; Defined at:
   986 ;;		line 238 in file "main.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;		None
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  i               2   38[BANK0 ] int 
   991 ;;  lenDelay        2   34[BANK0 ] int 
   992 ;;  my_delay        4   40[BANK0 ] unsigned long 
   993 ;;  selected_cha    2   36[BANK0 ] unsigned int 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1003 ;;      Params:         0       0       0       0
  1004 ;;      Locals:         0      10       0       0
  1005 ;;      Temps:          0       2       0       0
  1006 ;;      Totals:         0      12       0       0
  1007 ;;Total ram usage:       12 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    7
  1010 ;; This function calls:
  1011 ;;		_CmdMultiChannel
  1012 ;;		_CommandChannel
  1013 ;;		_ProcessReadChannel
  1014 ;;		___lmul
  1015 ;;		_ctoi
  1016 ;;		_delay_ms
  1017 ;;		_fast_delay_ms
  1018 ;;		_isdigit
  1019 ;;		_pow
  1020 ;;		_print_tx
  1021 ;;		_printc_tx
  1022 ;;		_printci_tx
  1023 ;; This function is called by:
  1024 ;;		_main
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           
  1029                           ;psect for function _processCmdIN
  1030  0027                     _processCmdIN:	
  1031                           
  1032                           ;main.c: 240: unsigned long my_delay = 250;
  1033                           
  1034                           ;incstack = 0
  1035                           ; Regs used in _processCmdIN: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1036  0027  3000               	movlw	0
  1037  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1039  002A  00CB               	movwf	processCmdIN@my_delay+3
  1040  002B  3000               	movlw	0
  1041  002C  00CA               	movwf	processCmdIN@my_delay+2
  1042  002D  3000               	movlw	0
  1043  002E  00C9               	movwf	processCmdIN@my_delay+1
  1044  002F  30FA               	movlw	250
  1045  0030  00C8               	movwf	processCmdIN@my_delay
  1046                           
  1047                           ;main.c: 241: unsigned int selected_channel = 0;
  1048  0031  01C4               	clrf	processCmdIN@selected_channel
  1049  0032  01C5               	clrf	processCmdIN@selected_channel+1
  1050                           
  1051                           ;main.c: 242: if (LenRs232 > 1)
  1052  0033  3002               	movlw	2
  1053  0034  0260               	subwf	_LenRs232,w
  1054  0035  1803               	btfsc	3,0
  1055  0036  2928               	goto	l1552
  1056  0037  2951               	goto	l1554
  1057  0038                     l1476:	
  1058                           ;main.c: 245: {
  1059                           ;main.c: 246: case 'S' :
  1060                           
  1061                           ;main.c: 243: {
  1062                           ;main.c: 244: switch (Rs232Frame[0])
  1063                           
  1064  0038  2902               	goto	L7
  1065  0039                     l1480:	
  1066                           ;main.c: 253: }
  1067                           ;main.c: 254: case 'C' :
  1068                           
  1069                           ;main.c: 252: break;
  1070                           
  1071                           ;main.c: 251: Err_Code = ERR_FRAME_TOO_LONG;
  1072                           
  1073                           ;main.c: 247: case 'R' :
  1074                           ;main.c: 248: case 'W' :
  1075                           ;main.c: 249: {
  1076                           ;main.c: 250: NewTs232Frame = MSG_ERROR;
  1077                           
  1078                           
  1079                           ;main.c: 255: {
  1080                           ;main.c: 256: if (LenRs232 > 3)
  1081  0039  3004               	movlw	4
  1082  003A  0260               	subwf	_LenRs232,w
  1083  003B  1803               	btfsc	3,0
  1084  003C  2902               	goto	L7
  1085                           
  1086                           ;main.c: 261: else if (LenRs232 < 2)
  1087                           
  1088                           ;main.c: 260: }
  1089                           
  1090                           ;main.c: 259: Err_Code = ERR_FRAME_TOO_LONG;
  1091                           
  1092                           ;main.c: 257: {
  1093                           ;main.c: 258: NewTs232Frame = MSG_ERROR;
  1094  003D  3002               	movlw	2
  1095  003E  0260               	subwf	_LenRs232,w
  1096  003F  1803               	skipnc
  1097  0040  2866               	goto	l1514
  1098                           
  1099                           ;main.c: 262: {
  1100                           ;main.c: 263: NewTs232Frame = MSG_ERROR;
  1101  0041  01E9               	clrf	_NewTs232Frame
  1102                           
  1103                           ;main.c: 264: Err_Code = ERR_FRAME_TOO_SMALL;
  1104  0042  3002               	movlw	2
  1105  0043  290F               	goto	L5
  1106  0044                     l1492:	
  1107                           ;main.c: 269: {
  1108                           ;main.c: 270: case 'D' :
  1109                           
  1110                           ;main.c: 266: else
  1111                           ;main.c: 267: {
  1112                           ;main.c: 268: switch (Rs232Frame[1])
  1113                           
  1114                           ;main.c: 265: }
  1115                           
  1116                           
  1117                           ;main.c: 271: {
  1118                           ;main.c: 272: if (Rs232Frame[2] == '1')
  1119  0044  3031               	movlw	49
  1120  0045  0652               	xorwf	_Rs232Frame+2,w
  1121  0046  1D03               	btfss	3,2
  1122  0047  2853               	goto	l1498
  1123                           
  1124                           ;main.c: 273: {
  1125                           ;main.c: 274: DebugMode = TRUE;
  1126  0048  01DF               	clrf	_DebugMode
  1127  0049  0ADF               	incf	_DebugMode,f
  1128                           
  1129                           ;main.c: 275: print_tx ("c-DebugON-", 10);
  1130  004A  300A               	movlw	10
  1131  004B  00A1               	movwf	print_tx@len
  1132  004C  3000               	movlw	0
  1133  004D  00A2               	movwf	print_tx@len+1
  1134  004E  3037               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1135  004F  118A  2620  118A   	fcall	_print_tx
  1136                           
  1137                           ;main.c: 276: }
  1138  0052  2951               	goto	l1554
  1139  0053                     l1498:	
  1140                           
  1141                           ;main.c: 277: else if (Rs232Frame[2] == '0')
  1142  0053  3030               	movlw	48
  1143  0054  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0055  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0056  0652               	xorwf	_Rs232Frame+2,w
  1146  0057  1D03               	btfss	3,2
  1147  0058  2863               	goto	l1504
  1148                           
  1149                           ;main.c: 278: {
  1150                           ;main.c: 279: DebugMode = FALSE;
  1151  0059  01DF               	clrf	_DebugMode
  1152                           
  1153                           ;main.c: 280: print_tx ("c-DebugOFF-", 11);
  1154  005A  300B               	movlw	11
  1155  005B  00A1               	movwf	print_tx@len
  1156  005C  3000               	movlw	0
  1157  005D  00A2               	movwf	print_tx@len+1
  1158  005E  301F               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1159  005F  118A  2620  118A   	fcall	_print_tx
  1160                           
  1161                           ;main.c: 281: }
  1162  0062  2951               	goto	l1554
  1163  0063                     l1504:	
  1164                           
  1165                           ;main.c: 282: else
  1166                           ;main.c: 283: {
  1167                           ;main.c: 284: NewTs232Frame = MSG_ERROR;
  1168  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1169  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1170  0065                     l1508:	
  1171                           ;main.c: 288: }
  1172                           ;main.c: 289: default :
  1173                           
  1174                           ;main.c: 286: }
  1175                           ;main.c: 287: break;
  1176                           
  1177                           ;main.c: 285: Err_Code = ERR_WRONG_DATAS;
  1178                           
  1179  0065  290D               	goto	L6
  1180  0066                     l1514:	
  1181                           ;main.c: 294: }
  1182                           ;main.c: 295: }
  1183                           
  1184                           ;main.c: 293: break;
  1185                           
  1186                           ;main.c: 292: Err_Code = ERR_WRONG_DATAS;
  1187                           
  1188                           ;main.c: 290: {
  1189                           ;main.c: 291: NewTs232Frame = MSG_ERROR;
  1190                           
  1191  0066  0851               	movf	_Rs232Frame+1,w
  1192                           
  1193                           ; Switch size 1, requested type "space"
  1194                           ; Number of cases is 1, Range of values is 68 to 68
  1195                           ; switch strategies available:
  1196                           ; Name         Instructions Cycles
  1197                           ; simple_byte            4     3 (average)
  1198                           ; direct_byte           12    10 (fixed)
  1199                           ; jumptable            263     9 (fixed)
  1200                           ;	Chosen strategy is simple_byte
  1201  0067  3A44               	xorlw	68	; case 68
  1202  0068  1903               	skipnz
  1203  0069  2844               	goto	l1492
  1204  006A  2865               	goto	l1508
  1205                           
  1206                           ;main.c: 296: }
  1207                           ;main.c: 297: break;
  1208  006B  2951               	goto	l1554
  1209  006C                     l1516:	
  1210                           ;main.c: 298: }
  1211                           ;main.c: 299: case 'L' :
  1212                           
  1213                           
  1214                           ;main.c: 300: case 'U' :
  1215                           ;main.c: 301: case 'D' :
  1216                           ;main.c: 302: case 'M' :
  1217                           ;main.c: 303: case 'P' :
  1218                           ;main.c: 304: {
  1219                           ;main.c: 305: my_delay = 0;
  1220  006C  3000               	movlw	0
  1221  006D  00CB               	movwf	processCmdIN@my_delay+3
  1222  006E  3000               	movlw	0
  1223  006F  00CA               	movwf	processCmdIN@my_delay+2
  1224  0070  3000               	movlw	0
  1225  0071  00C9               	movwf	processCmdIN@my_delay+1
  1226  0072  3000               	movlw	0
  1227  0073  00C8               	movwf	processCmdIN@my_delay
  1228                           
  1229                           ;main.c: 306: int lenDelay = LenRs232-1;
  1230  0074  0860               	movf	_LenRs232,w
  1231  0075  3EFF               	addlw	255
  1232  0076  00C2               	movwf	processCmdIN@lenDelay
  1233  0077  30FF               	movlw	255
  1234  0078  1803               	skipnc
  1235  0079  3000               	movlw	0
  1236  007A  00C3               	movwf	processCmdIN@lenDelay+1
  1237                           
  1238                           ;main.c: 307: for (int i=0; i < lenDelay && NewTs232Frame != MSG_ERROR; i++)
  1239  007B  01C6               	clrf	processCmdIN@i
  1240  007C  01C7               	clrf	processCmdIN@i+1
  1241  007D                     l1530:	
  1242  007D  0847               	movf	processCmdIN@i+1,w
  1243  007E  3A80               	xorlw	128
  1244  007F  00C0               	movwf	??_processCmdIN
  1245  0080  0843               	movf	processCmdIN@lenDelay+1,w
  1246  0081  3A80               	xorlw	128
  1247  0082  0240               	subwf	??_processCmdIN,w
  1248  0083  1D03               	skipz
  1249  0084  2887               	goto	u1065
  1250  0085  0842               	movf	processCmdIN@lenDelay,w
  1251  0086  0246               	subwf	processCmdIN@i,w
  1252  0087                     u1065:	
  1253  0087  1803               	skipnc
  1254  0088  2951               	goto	l1554
  1255  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1256  008A  1303               	bcf	3,6	;RP1=0, select bank0
  1257  008B  0869               	movf	_NewTs232Frame,w
  1258  008C  1903               	btfsc	3,2
  1259  008D  2951               	goto	l1554
  1260                           
  1261                           ;main.c: 308: {
  1262                           ;main.c: 309: if (isdigit(Rs232Frame[i+1])==TRUE)
  1263  008E  0846               	movf	processCmdIN@i,w
  1264  008F  3E01               	addlw	1
  1265  0090  3E50               	addlw	(low (_Rs232Frame| 0))& (0+255)
  1266  0091  0084               	movwf	4
  1267  0092  1383               	bcf	3,7	;select IRP bank0
  1268  0093  0800               	movf	0,w
  1269  0094  118A  26F7  118A   	fcall	_isdigit
  1270  0097  1C03               	btfss	3,0
  1271  0098  28F0               	goto	l1524
  1272                           
  1273                           ;main.c: 310: {
  1274                           ;main.c: 311: my_delay += (unsigned long) (ctoi(Rs232Frame[i+1])) * pow (10, lenDelay-i-
      +                          1);
  1275  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1276  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1277  009B  0846               	movf	processCmdIN@i,w
  1278  009C  3E01               	addlw	1
  1279  009D  3E50               	addlw	(low (_Rs232Frame| 0))& (0+255)
  1280  009E  0084               	movwf	4
  1281  009F  1383               	bcf	3,7	;select IRP bank0
  1282  00A0  0800               	movf	0,w
  1283  00A1  118A  272A  118A   	fcall	_ctoi
  1284  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1285  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1286  00A6  0820               	movf	?_ctoi,w
  1287  00A7  00AF               	movwf	___lmul@multiplier
  1288  00A8  0821               	movf	?_ctoi+1,w
  1289  00A9  00B0               	movwf	___lmul@multiplier+1
  1290  00AA  3000               	movlw	0
  1291  00AB  1BB0               	btfsc	___lmul@multiplier+1,7
  1292  00AC  30FF               	movlw	255
  1293  00AD  00B1               	movwf	___lmul@multiplier+2
  1294  00AE  00B2               	movwf	___lmul@multiplier+3
  1295  00AF  0846               	movf	processCmdIN@i,w
  1296  00B0  3E01               	addlw	1
  1297  00B1  00C0               	movwf	??_processCmdIN
  1298  00B2  0847               	movf	processCmdIN@i+1,w
  1299  00B3  1803               	skipnc
  1300  00B4  3E01               	addlw	1
  1301  00B5  3E00               	addlw	0
  1302  00B6  00C1               	movwf	??_processCmdIN+1
  1303  00B7  09C0               	comf	??_processCmdIN,f
  1304  00B8  09C1               	comf	??_processCmdIN+1,f
  1305  00B9  0AC0               	incf	??_processCmdIN,f
  1306  00BA  1903               	skipnz
  1307  00BB  0AC1               	incf	??_processCmdIN+1,f
  1308  00BC  0842               	movf	processCmdIN@lenDelay,w
  1309  00BD  0740               	addwf	??_processCmdIN,w
  1310  00BE  00A8               	movwf	pow@b
  1311  00BF  0843               	movf	processCmdIN@lenDelay+1,w
  1312  00C0  1803               	skipnc
  1313  00C1  0A43               	incf	processCmdIN@lenDelay+1,w
  1314  00C2  0741               	addwf	??_processCmdIN+1,w
  1315  00C3  00A9               	movwf	pow@b+1
  1316  00C4  300A               	movlw	10
  1317  00C5  00A6               	movwf	pow@a
  1318  00C6  3000               	movlw	0
  1319  00C7  00A7               	movwf	pow@a+1
  1320  00C8  118A  2590  118A   	fcall	_pow
  1321  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1322  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1323  00CD  0826               	movf	?_pow,w
  1324  00CE  00B3               	movwf	___lmul@multiplicand
  1325  00CF  0827               	movf	?_pow+1,w
  1326  00D0  00B4               	movwf	___lmul@multiplicand+1
  1327  00D1  3000               	movlw	0
  1328  00D2  1BB4               	btfsc	___lmul@multiplicand+1,7
  1329  00D3  30FF               	movlw	255
  1330  00D4  00B5               	movwf	___lmul@multiplicand+2
  1331  00D5  00B6               	movwf	___lmul@multiplicand+3
  1332  00D6  118A  25DF  118A   	fcall	___lmul
  1333  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1334  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1335  00DB  082F               	movf	?___lmul,w
  1336  00DC  07C8               	addwf	processCmdIN@my_delay,f
  1337  00DD  0830               	movf	?___lmul+1,w
  1338  00DE  1103               	clrz
  1339  00DF  1803               	skipnc
  1340  00E0  3E01               	addlw	1
  1341  00E1  1D03               	btfss	3,2
  1342  00E2  07C9               	addwf	processCmdIN@my_delay+1,f
  1343  00E3  0831               	movf	?___lmul+2,w
  1344  00E4  1103               	clrz
  1345  00E5  1803               	skipnc
  1346  00E6  3E01               	addlw	1
  1347  00E7  1D03               	btfss	3,2
  1348  00E8  07CA               	addwf	processCmdIN@my_delay+2,f
  1349  00E9  0832               	movf	?___lmul+3,w
  1350  00EA  1103               	clrz
  1351  00EB  1803               	skipnc
  1352  00EC  3E01               	addlw	1
  1353  00ED  1D03               	btfss	3,2
  1354  00EE  07CB               	addwf	processCmdIN@my_delay+3,f
  1355                           
  1356                           ;main.c: 312: }
  1357  00EF  28F7               	goto	l1528
  1358  00F0                     l1524:	
  1359                           
  1360                           ;main.c: 313: else
  1361                           ;main.c: 314: {
  1362                           ;main.c: 315: NewTs232Frame = MSG_ERROR;
  1363  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1364  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1365  00F2  01E9               	clrf	_NewTs232Frame
  1366                           
  1367                           ;main.c: 316: Err_Code = ERR_WRONG_DATAS;
  1368  00F3  3005               	movlw	5
  1369  00F4  00C0               	movwf	??_processCmdIN
  1370  00F5  0840               	movf	??_processCmdIN,w
  1371  00F6  00E8               	movwf	_Err_Code
  1372  00F7                     l1528:	
  1373  00F7  3001               	movlw	1
  1374  00F8  07C6               	addwf	processCmdIN@i,f
  1375  00F9  1803               	skipnc
  1376  00FA  0AC7               	incf	processCmdIN@i+1,f
  1377  00FB  3000               	movlw	0
  1378  00FC  07C7               	addwf	processCmdIN@i+1,f
  1379  00FD  287D               	goto	l1530
  1380  00FE                     l1534:	
  1381                           ;main.c: 320: }
  1382                           ;main.c: 322: case 'u' :
  1383                           
  1384                           ;main.c: 317: }
  1385                           ;main.c: 318: }
  1386                           ;main.c: 319: break;
  1387                           
  1388                           
  1389                           ;main.c: 323: case 'd' :
  1390                           ;main.c: 324: case 'm' :
  1391                           ;main.c: 325: case 'p' :
  1392                           ;main.c: 326: {
  1393                           ;main.c: 327: if (LenRs232 > 2)
  1394  00FE  3003               	movlw	3
  1395  00FF  0260               	subwf	_LenRs232,w
  1396  0100  1C03               	skipc
  1397  0101  2905               	goto	l1540
  1398  0102                     L7:	
  1399                           
  1400                           ;main.c: 328: {
  1401                           ;main.c: 329: NewTs232Frame = MSG_ERROR;
  1402  0102  01E9               	clrf	_NewTs232Frame
  1403                           
  1404                           ;main.c: 330: Err_Code = ERR_FRAME_TOO_LONG;
  1405  0103  3003               	movlw	3
  1406  0104  290F               	goto	L5
  1407  0105                     l1540:	
  1408                           ;main.c: 331: }
  1409                           
  1410                           
  1411                           ;main.c: 332: else if (!isdigit(Rs232Frame[1]))
  1412  0105  0851               	movf	_Rs232Frame+1,w
  1413  0106  118A  26F7  118A   	fcall	_isdigit
  1414  0109  1803               	btfsc	3,0
  1415  010A  2913               	goto	l1546
  1416                           
  1417                           ;main.c: 333: {
  1418                           ;main.c: 334: NewTs232Frame = MSG_ERROR;
  1419  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1420  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1421  010D                     L6:	
  1422  010D  01E9               	clrf	_NewTs232Frame
  1423                           
  1424                           ;main.c: 335: Err_Code = ERR_WRONG_DATAS;
  1425  010E  3005               	movlw	5
  1426  010F                     L5:	
  1427  010F  00C0               	movwf	??_processCmdIN
  1428  0110  0840               	movf	??_processCmdIN,w
  1429  0111  00E8               	movwf	_Err_Code
  1430                           
  1431                           ;main.c: 336: }
  1432  0112  2951               	goto	l1554
  1433  0113                     l1546:	
  1434                           
  1435                           ;main.c: 337: else
  1436                           ;main.c: 338: {
  1437                           ;main.c: 339: selected_channel = (unsigned int) ctoi(Rs232Frame[1]);
  1438  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1439  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1440  0115  0851               	movf	_Rs232Frame+1,w
  1441  0116  118A  272A  118A   	fcall	_ctoi
  1442  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1443  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1444  011B  0821               	movf	?_ctoi+1,w
  1445  011C  00C5               	movwf	processCmdIN@selected_channel+1
  1446  011D  0820               	movf	?_ctoi,w
  1447  011E  00C4               	movwf	processCmdIN@selected_channel
  1448                           
  1449                           ;main.c: 340: my_delay = 50;
  1450  011F  3000               	movlw	0
  1451  0120  00CB               	movwf	processCmdIN@my_delay+3
  1452  0121  3000               	movlw	0
  1453  0122  00CA               	movwf	processCmdIN@my_delay+2
  1454  0123  3000               	movlw	0
  1455  0124  00C9               	movwf	processCmdIN@my_delay+1
  1456  0125  3032               	movlw	50
  1457  0126  00C8               	movwf	processCmdIN@my_delay
  1458                           
  1459                           ;main.c: 343: }
  1460                           ;main.c: 344: }
  1461                           
  1462                           ;main.c: 341: }
  1463                           ;main.c: 342: break;
  1464  0127  2951               	goto	l1554
  1465  0128                     l1552:	
  1466  0128  0850               	movf	_Rs232Frame,w
  1467                           
  1468                           ; Switch size 1, requested type "space"
  1469                           ; Number of cases is 13, Range of values is 67 to 117
  1470                           ; switch strategies available:
  1471                           ; Name         Instructions Cycles
  1472                           ; simple_byte           40    21 (average)
  1473                           ; direct_byte          112    10 (fixed)
  1474                           ; jumptable            263     9 (fixed)
  1475                           ;	Chosen strategy is simple_byte
  1476  0129  3A43               	xorlw	67	; case 67
  1477  012A  1903               	skipnz
  1478  012B  2839               	goto	l1480
  1479  012C  3A07               	xorlw	7	; case 68
  1480  012D  1903               	skipnz
  1481  012E  286C               	goto	l1516
  1482  012F  3A08               	xorlw	8	; case 76
  1483  0130  1903               	skipnz
  1484  0131  286C               	goto	l1516
  1485  0132  3A01               	xorlw	1	; case 77
  1486  0133  1903               	skipnz
  1487  0134  286C               	goto	l1516
  1488  0135  3A1D               	xorlw	29	; case 80
  1489  0136  1903               	skipnz
  1490  0137  286C               	goto	l1516
  1491  0138  3A02               	xorlw	2	; case 82
  1492  0139  1903               	skipnz
  1493  013A  2838               	goto	l1476
  1494  013B  3A01               	xorlw	1	; case 83
  1495  013C  1903               	skipnz
  1496  013D  2838               	goto	l1476
  1497  013E  3A06               	xorlw	6	; case 85
  1498  013F  1903               	skipnz
  1499  0140  286C               	goto	l1516
  1500  0141  3A02               	xorlw	2	; case 87
  1501  0142  1903               	skipnz
  1502  0143  2838               	goto	l1476
  1503  0144  3A33               	xorlw	51	; case 100
  1504  0145  1903               	skipnz
  1505  0146  28FE               	goto	l1534
  1506  0147  3A09               	xorlw	9	; case 109
  1507  0148  1903               	skipnz
  1508  0149  28FE               	goto	l1534
  1509  014A  3A1D               	xorlw	29	; case 112
  1510  014B  1903               	skipnz
  1511  014C  28FE               	goto	l1534
  1512  014D  3A05               	xorlw	5	; case 117
  1513  014E  1903               	skipnz
  1514  014F  28FE               	goto	l1534
  1515  0150  2951               	goto	l1554
  1516  0151                     l1554:	
  1517                           
  1518                           ;main.c: 346: }
  1519                           ;main.c: 347: if (NewTs232Frame != MSG_ERROR)
  1520  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1521  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1522  0153  0869               	movf	_NewTs232Frame,w
  1523  0154  1D03               	btfss	3,2
  1524  0155  2A42               	goto	l1626
  1525  0156  2A6D               	goto	l1628
  1526  0157                     l1558:	
  1527                           ;main.c: 350: {
  1528                           ;main.c: 352: case 'S' :
  1529                           
  1530                           ;main.c: 348: {
  1531                           ;main.c: 349: switch (Rs232Frame[0])
  1532                           
  1533                           
  1534                           ;main.c: 353: {
  1535                           ;main.c: 354: print_tx(("sSituo5-" "v01.01"), 14 );
  1536  0157  300E               	movlw	14
  1537  0158  00A1               	movwf	print_tx@len
  1538  0159  3000               	movlw	0
  1539  015A  00A2               	movwf	print_tx@len+1
  1540  015B  3001               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1541  015C  118A  2620  118A   	fcall	_print_tx
  1542                           
  1543                           ;main.c: 358: {
  1544                           ;main.c: 360: break;
  1545                           
  1546                           ;main.c: 356: }
  1547                           ;main.c: 357: case 'C' :
  1548                           
  1549                           ;main.c: 355: break;
  1550  015F  2A6D               	goto	l1628
  1551  0160                     l1560:	
  1552                           ;main.c: 361: }
  1553                           ;main.c: 362: case 'R' :
  1554                           
  1555                           
  1556                           ;main.c: 363: {
  1557                           ;main.c: 364: printc_tx('r');
  1558  0160  3072               	movlw	114
  1559  0161  118A  26D6  118A   	fcall	_printc_tx
  1560                           
  1561                           ;main.c: 365: break;
  1562  0164  2A6D               	goto	l1628
  1563  0165                     l1562:	
  1564                           ;main.c: 366: }
  1565                           ;main.c: 367: case 'W' :
  1566                           
  1567                           
  1568                           ;main.c: 368: {
  1569                           ;main.c: 369: printc_tx('w');
  1570  0165  3077               	movlw	119
  1571  0166  118A  26D6  118A   	fcall	_printc_tx
  1572                           
  1573                           ;main.c: 370: break;
  1574  0169  2A6D               	goto	l1628
  1575  016A                     l1564:	
  1576                           ;main.c: 371: }
  1577                           ;main.c: 372: case 'L' :
  1578                           
  1579                           
  1580                           ;main.c: 373: {
  1581                           ;main.c: 374: CommandChannel(my_delay);
  1582  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1583  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1584  016C  084B               	movf	processCmdIN@my_delay+3,w
  1585  016D  00A8               	movwf	CommandChannel@d+3
  1586  016E  084A               	movf	processCmdIN@my_delay+2,w
  1587  016F  00A7               	movwf	CommandChannel@d+2
  1588  0170  0849               	movf	processCmdIN@my_delay+1,w
  1589  0171  00A6               	movwf	CommandChannel@d+1
  1590  0172  0848               	movf	processCmdIN@my_delay,w
  1591  0173  00A5               	movwf	CommandChannel@d
  1592  0174  118A  26C2  118A   	fcall	_CommandChannel
  1593                           
  1594                           ;main.c: 375: ProcessReadChannel();
  1595  0177  118A  23F8  118A   	fcall	_ProcessReadChannel
  1596                           
  1597                           ;main.c: 376: break;
  1598  017A  2A6D               	goto	l1628
  1599  017B                     l1566:	
  1600                           ;main.c: 377: }
  1601                           ;main.c: 378: case 'u' :
  1602                           
  1603                           
  1604                           ;main.c: 379: {
  1605                           ;main.c: 380: CmdMultiChannel (selected_channel, my_delay);
  1606  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1607  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1608  017D  0845               	movf	processCmdIN@selected_channel+1,w
  1609  017E  00B3               	movwf	CmdMultiChannel@chanToActive+1
  1610  017F  0844               	movf	processCmdIN@selected_channel,w
  1611  0180  00B2               	movwf	CmdMultiChannel@chanToActive
  1612  0181  084B               	movf	processCmdIN@my_delay+3,w
  1613  0182  00B7               	movwf	CmdMultiChannel@delay+3
  1614  0183  084A               	movf	processCmdIN@my_delay+2,w
  1615  0184  00B6               	movwf	CmdMultiChannel@delay+2
  1616  0185  0849               	movf	processCmdIN@my_delay+1,w
  1617  0186  00B5               	movwf	CmdMultiChannel@delay+1
  1618  0187  0848               	movf	processCmdIN@my_delay,w
  1619  0188  00B4               	movwf	CmdMultiChannel@delay
  1620  0189  118A  2273  118A   	fcall	_CmdMultiChannel
  1621                           
  1622                           ;main.c: 381: RC0 = 0;
  1623  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1624  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1625  018E  1007               	bcf	7,0	;volatile
  1626                           
  1627                           ;main.c: 382: fast_delay_ms();
  1628  018F  118A  271F  118A   	fcall	_fast_delay_ms
  1629                           
  1630                           ;main.c: 383: RC0 = 1;
  1631  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1633  0194  1407               	bsf	7,0	;volatile
  1634                           
  1635                           ;main.c: 384: printc_tx('u');
  1636  0195  3075               	movlw	117
  1637  0196  118A  26D6  118A   	fcall	_printc_tx
  1638                           
  1639                           ;main.c: 385: break;
  1640  0199  2A6D               	goto	l1628
  1641  019A                     l196:	
  1642                           ;main.c: 386: }
  1643                           ;main.c: 387: case 'U' :
  1644                           
  1645                           
  1646                           ;main.c: 388: {
  1647                           ;main.c: 389: RC0 = 0;
  1648  019A  1007               	bcf	7,0	;volatile
  1649                           
  1650                           ;main.c: 390: delay_ms(my_delay);
  1651  019B  0849               	movf	processCmdIN@my_delay+1,w
  1652  019C  00A1               	movwf	delay_ms@x+1
  1653  019D  0848               	movf	processCmdIN@my_delay,w
  1654  019E  00A0               	movwf	delay_ms@x
  1655  019F  118A  266C  118A   	fcall	_delay_ms
  1656                           
  1657                           ;main.c: 391: RC0 = 1;
  1658  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1659  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1660  01A4  1407               	bsf	7,0	;volatile
  1661                           
  1662                           ;main.c: 392: printc_tx('U');
  1663  01A5  3055               	movlw	85
  1664  01A6  118A  26D6  118A   	fcall	_printc_tx
  1665                           
  1666                           ;main.c: 393: break;
  1667  01A9  2A6D               	goto	l1628
  1668  01AA                     l1580:	
  1669                           ;main.c: 394: }
  1670                           ;main.c: 396: case 'd' :
  1671                           
  1672                           
  1673                           ;main.c: 397: {
  1674                           ;main.c: 398: CmdMultiChannel (selected_channel, my_delay);
  1675  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1676  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1677  01AC  0845               	movf	processCmdIN@selected_channel+1,w
  1678  01AD  00B3               	movwf	CmdMultiChannel@chanToActive+1
  1679  01AE  0844               	movf	processCmdIN@selected_channel,w
  1680  01AF  00B2               	movwf	CmdMultiChannel@chanToActive
  1681  01B0  084B               	movf	processCmdIN@my_delay+3,w
  1682  01B1  00B7               	movwf	CmdMultiChannel@delay+3
  1683  01B2  084A               	movf	processCmdIN@my_delay+2,w
  1684  01B3  00B6               	movwf	CmdMultiChannel@delay+2
  1685  01B4  0849               	movf	processCmdIN@my_delay+1,w
  1686  01B5  00B5               	movwf	CmdMultiChannel@delay+1
  1687  01B6  0848               	movf	processCmdIN@my_delay,w
  1688  01B7  00B4               	movwf	CmdMultiChannel@delay
  1689  01B8  118A  2273  118A   	fcall	_CmdMultiChannel
  1690                           
  1691                           ;main.c: 399: RC1 = 0;
  1692  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1693  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1694  01BD  1087               	bcf	7,1	;volatile
  1695                           
  1696                           ;main.c: 400: fast_delay_ms();
  1697  01BE  118A  271F  118A   	fcall	_fast_delay_ms
  1698                           
  1699                           ;main.c: 401: RC1 = 1;
  1700  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1701  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1702  01C3  1487               	bsf	7,1	;volatile
  1703                           
  1704                           ;main.c: 402: printc_tx('d');
  1705  01C4  3064               	movlw	100
  1706  01C5  118A  26D6  118A   	fcall	_printc_tx
  1707                           
  1708                           ;main.c: 403: break;
  1709  01C8  2A6D               	goto	l1628
  1710  01C9                     l198:	
  1711                           ;main.c: 404: }
  1712                           ;main.c: 405: case 'D' :
  1713                           
  1714                           
  1715                           ;main.c: 406: {
  1716                           ;main.c: 407: RC1 = 0;
  1717  01C9  1087               	bcf	7,1	;volatile
  1718                           
  1719                           ;main.c: 408: delay_ms(my_delay);
  1720  01CA  0849               	movf	processCmdIN@my_delay+1,w
  1721  01CB  00A1               	movwf	delay_ms@x+1
  1722  01CC  0848               	movf	processCmdIN@my_delay,w
  1723  01CD  00A0               	movwf	delay_ms@x
  1724  01CE  118A  266C  118A   	fcall	_delay_ms
  1725                           
  1726                           ;main.c: 409: RC1 = 1;
  1727  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  1728  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  1729  01D3  1487               	bsf	7,1	;volatile
  1730                           
  1731                           ;main.c: 410: printc_tx('D');
  1732  01D4  3044               	movlw	68
  1733  01D5  118A  26D6  118A   	fcall	_printc_tx
  1734                           
  1735                           ;main.c: 411: break;
  1736  01D8  2A6D               	goto	l1628
  1737  01D9                     l1594:	
  1738                           ;main.c: 412: }
  1739                           ;main.c: 413: case 'm' :
  1740                           
  1741                           
  1742                           ;main.c: 414: {
  1743                           ;main.c: 415: CmdMultiChannel (selected_channel, my_delay);
  1744  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1745  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1746  01DB  0845               	movf	processCmdIN@selected_channel+1,w
  1747  01DC  00B3               	movwf	CmdMultiChannel@chanToActive+1
  1748  01DD  0844               	movf	processCmdIN@selected_channel,w
  1749  01DE  00B2               	movwf	CmdMultiChannel@chanToActive
  1750  01DF  084B               	movf	processCmdIN@my_delay+3,w
  1751  01E0  00B7               	movwf	CmdMultiChannel@delay+3
  1752  01E1  084A               	movf	processCmdIN@my_delay+2,w
  1753  01E2  00B6               	movwf	CmdMultiChannel@delay+2
  1754  01E3  0849               	movf	processCmdIN@my_delay+1,w
  1755  01E4  00B5               	movwf	CmdMultiChannel@delay+1
  1756  01E5  0848               	movf	processCmdIN@my_delay,w
  1757  01E6  00B4               	movwf	CmdMultiChannel@delay
  1758  01E7  118A  2273  118A   	fcall	_CmdMultiChannel
  1759                           
  1760                           ;main.c: 416: RC2 = 0;
  1761  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1762  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1763  01EC  1107               	bcf	7,2	;volatile
  1764                           
  1765                           ;main.c: 417: fast_delay_ms();
  1766  01ED  118A  271F  118A   	fcall	_fast_delay_ms
  1767                           
  1768                           ;main.c: 418: RC2 = 1;
  1769  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1770  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1771  01F2  1507               	bsf	7,2	;volatile
  1772                           
  1773                           ;main.c: 419: printc_tx('m');
  1774  01F3  306D               	movlw	109
  1775  01F4  118A  26D6  118A   	fcall	_printc_tx
  1776                           
  1777                           ;main.c: 420: break;
  1778  01F7  2A6D               	goto	l1628
  1779  01F8                     l200:	
  1780                           ;main.c: 421: }
  1781                           ;main.c: 422: case 'M' :
  1782                           
  1783                           
  1784                           ;main.c: 423: {
  1785                           ;main.c: 424: RC2 = 0;
  1786  01F8  1107               	bcf	7,2	;volatile
  1787                           
  1788                           ;main.c: 425: delay_ms(my_delay);
  1789  01F9  0849               	movf	processCmdIN@my_delay+1,w
  1790  01FA  00A1               	movwf	delay_ms@x+1
  1791  01FB  0848               	movf	processCmdIN@my_delay,w
  1792  01FC  00A0               	movwf	delay_ms@x
  1793  01FD  118A  266C  118A   	fcall	_delay_ms
  1794                           
  1795                           ;main.c: 426: RC2 = 1;
  1796  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1797  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1798  0202  1507               	bsf	7,2	;volatile
  1799                           
  1800                           ;main.c: 427: printc_tx('M');
  1801  0203  304D               	movlw	77
  1802  0204  118A  26D6  118A   	fcall	_printc_tx
  1803                           
  1804                           ;main.c: 428: break;
  1805  0207  2A6D               	goto	l1628
  1806  0208                     l1608:	
  1807                           ;main.c: 429: }
  1808                           ;main.c: 430: case 'p' :
  1809                           
  1810                           
  1811                           ;main.c: 431: {
  1812                           ;main.c: 432: CmdMultiChannel (selected_channel, my_delay);
  1813  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1814  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1815  020A  0845               	movf	processCmdIN@selected_channel+1,w
  1816  020B  00B3               	movwf	CmdMultiChannel@chanToActive+1
  1817  020C  0844               	movf	processCmdIN@selected_channel,w
  1818  020D  00B2               	movwf	CmdMultiChannel@chanToActive
  1819  020E  084B               	movf	processCmdIN@my_delay+3,w
  1820  020F  00B7               	movwf	CmdMultiChannel@delay+3
  1821  0210  084A               	movf	processCmdIN@my_delay+2,w
  1822  0211  00B6               	movwf	CmdMultiChannel@delay+2
  1823  0212  0849               	movf	processCmdIN@my_delay+1,w
  1824  0213  00B5               	movwf	CmdMultiChannel@delay+1
  1825  0214  0848               	movf	processCmdIN@my_delay,w
  1826  0215  00B4               	movwf	CmdMultiChannel@delay
  1827  0216  118A  2273  118A   	fcall	_CmdMultiChannel
  1828                           
  1829                           ;main.c: 433: RA5 = 0;
  1830  0219  1283               	bcf	3,5	;RP0=0, select bank0
  1831  021A  1303               	bcf	3,6	;RP1=0, select bank0
  1832  021B  1285               	bcf	5,5	;volatile
  1833                           
  1834                           ;main.c: 434: fast_delay_ms();
  1835  021C  118A  271F  118A   	fcall	_fast_delay_ms
  1836                           
  1837                           ;main.c: 435: RA5 = 1;
  1838  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0221  1685               	bsf	5,5	;volatile
  1841                           
  1842                           ;main.c: 436: printc_tx('p');
  1843  0222  3070               	movlw	112
  1844  0223  118A  26D6  118A   	fcall	_printc_tx
  1845                           
  1846                           ;main.c: 437: break;
  1847  0226  2A6D               	goto	l1628
  1848  0227                     l202:	
  1849                           ;main.c: 438: }
  1850                           ;main.c: 439: case 'P' :
  1851                           
  1852                           
  1853                           ;main.c: 440: {
  1854                           ;main.c: 446: RA5 = 0;
  1855  0227  1285               	bcf	5,5	;volatile
  1856                           
  1857                           ;main.c: 447: delay_ms(my_delay);
  1858  0228  0849               	movf	processCmdIN@my_delay+1,w
  1859  0229  00A1               	movwf	delay_ms@x+1
  1860  022A  0848               	movf	processCmdIN@my_delay,w
  1861  022B  00A0               	movwf	delay_ms@x
  1862  022C  118A  266C  118A   	fcall	_delay_ms
  1863                           
  1864                           ;main.c: 448: RA5 = 1;
  1865  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0231  1685               	bsf	5,5	;volatile
  1868                           
  1869                           ;main.c: 449: printc_tx('P');
  1870  0232  3050               	movlw	80
  1871  0233  118A  26D6  118A   	fcall	_printc_tx
  1872                           
  1873                           ;main.c: 450: break;
  1874  0236  2A6D               	goto	l1628
  1875  0237                     l1622:	
  1876                           ;main.c: 451: }
  1877                           ;main.c: 452: default:
  1878                           
  1879                           
  1880                           ;main.c: 453: {
  1881                           ;main.c: 455: printci_tx('e', ERR_UNKNOWN_COMMAND);
  1882  0237  3001               	movlw	1
  1883  0238  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0239  1303               	bcf	3,6	;RP1=0, select bank0
  1885  023A  00A2               	movwf	printci_tx@i
  1886  023B  3000               	movlw	0
  1887  023C  00A3               	movwf	printci_tx@i+1
  1888  023D  3065               	movlw	101
  1889  023E  118A  268E  118A   	fcall	_printci_tx
  1890                           
  1891                           ;main.c: 457: }
  1892                           ;main.c: 458: }
  1893                           
  1894                           ;main.c: 456: break;
  1895  0241  2A6D               	goto	l1628
  1896  0242                     l1626:	
  1897  0242  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0243  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0244  0850               	movf	_Rs232Frame,w
  1900                           
  1901                           ; Switch size 1, requested type "space"
  1902                           ; Number of cases is 13, Range of values is 67 to 117
  1903                           ; switch strategies available:
  1904                           ; Name         Instructions Cycles
  1905                           ; simple_byte           40    21 (average)
  1906                           ; direct_byte          112    10 (fixed)
  1907                           ; jumptable            263     9 (fixed)
  1908                           ;	Chosen strategy is simple_byte
  1909  0245  3A43               	xorlw	67	; case 67
  1910  0246  1903               	skipnz
  1911  0247  2A6D               	goto	l1628
  1912  0248  3A07               	xorlw	7	; case 68
  1913  0249  1903               	skipnz
  1914  024A  29C9               	goto	l198
  1915  024B  3A08               	xorlw	8	; case 76
  1916  024C  1903               	skipnz
  1917  024D  296A               	goto	l1564
  1918  024E  3A01               	xorlw	1	; case 77
  1919  024F  1903               	skipnz
  1920  0250  29F8               	goto	l200
  1921  0251  3A1D               	xorlw	29	; case 80
  1922  0252  1903               	skipnz
  1923  0253  2A27               	goto	l202
  1924  0254  3A02               	xorlw	2	; case 82
  1925  0255  1903               	skipnz
  1926  0256  2960               	goto	l1560
  1927  0257  3A01               	xorlw	1	; case 83
  1928  0258  1903               	skipnz
  1929  0259  2957               	goto	l1558
  1930  025A  3A06               	xorlw	6	; case 85
  1931  025B  1903               	skipnz
  1932  025C  299A               	goto	l196
  1933  025D  3A02               	xorlw	2	; case 87
  1934  025E  1903               	skipnz
  1935  025F  2965               	goto	l1562
  1936  0260  3A33               	xorlw	51	; case 100
  1937  0261  1903               	skipnz
  1938  0262  29AA               	goto	l1580
  1939  0263  3A09               	xorlw	9	; case 109
  1940  0264  1903               	skipnz
  1941  0265  29D9               	goto	l1594
  1942  0266  3A1D               	xorlw	29	; case 112
  1943  0267  1903               	skipnz
  1944  0268  2A08               	goto	l1608
  1945  0269  3A05               	xorlw	5	; case 117
  1946  026A  1903               	skipnz
  1947  026B  297B               	goto	l1566
  1948  026C  2A37               	goto	l1622
  1949  026D                     l1628:	
  1950                           
  1951                           ;main.c: 460: }
  1952                           ;main.c: 462: LenRs232 = 0;
  1953  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1954  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1955  026F  01E0               	clrf	_LenRs232
  1956                           
  1957                           ;main.c: 463: NewTs232Frame = MSG_ANY;
  1958  0270  01E9               	clrf	_NewTs232Frame
  1959  0271  0AE9               	incf	_NewTs232Frame,f
  1960  0272  0008               	return
  1961  0273                     __end_of_processCmdIN:	
  1962                           
  1963                           	psect	text2
  1964  06D6                     __ptext2:	
  1965 ;; *************** function _printc_tx *****************
  1966 ;; Defined at:
  1967 ;;		line 25 in file "usart.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  c               1    wreg     const unsigned char 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  c               1    1[BANK0 ] const unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      void 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2, status,0, pclath, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1981 ;;      Params:         0       0       0       0
  1982 ;;      Locals:         0       1       0       0
  1983 ;;      Temps:          0       0       0       0
  1984 ;;      Totals:         0       1       0       0
  1985 ;;Total ram usage:        1 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    5
  1988 ;; This function calls:
  1989 ;;		_putch
  1990 ;; This function is called by:
  1991 ;;		_processCmdIN
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           
  1996                           ;psect for function _printc_tx
  1997  06D6                     _printc_tx:	
  1998                           
  1999                           ;incstack = 0
  2000                           ; Regs used in _printc_tx: [wreg+status,2+status,0+pclath+cstack]
  2001                           ;printc_tx@c stored from wreg
  2002  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  2003  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  2004  06D8  00A1               	movwf	printc_tx@c
  2005                           
  2006                           ;usart.c: 27: putch(0x02);
  2007  06D9  3002               	movlw	2
  2008  06DA  118A  2746  118A   	fcall	_putch
  2009                           
  2010                           ;usart.c: 28: putch(c);
  2011  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  2012  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  2013  06DF  0821               	movf	printc_tx@c,w
  2014  06E0  118A  2746  118A   	fcall	_putch
  2015                           
  2016                           ;usart.c: 29: putch(0x03);
  2017  06E3  3003               	movlw	3
  2018  06E4  118A  2746         	fcall	_putch
  2019  06E6  0008               	return
  2020  06E7                     __end_of_printc_tx:	
  2021                           
  2022                           	psect	text3
  2023  0590                     __ptext3:	
  2024 ;; *************** function _pow *****************
  2025 ;; Defined at:
  2026 ;;		line 152 in file "main.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  a               2    6[BANK0 ] const int 
  2029 ;;  b               2    8[BANK0 ] const int 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;  i               2   13[BANK0 ] int 
  2032 ;;  result          2   11[BANK0 ] int 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  2    6[BANK0 ] int 
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2042 ;;      Params:         0       4       0       0
  2043 ;;      Locals:         0       4       0       0
  2044 ;;      Temps:          0       1       0       0
  2045 ;;      Totals:         0       9       0       0
  2046 ;;Total ram usage:        9 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    5
  2049 ;; This function calls:
  2050 ;;		___wmul
  2051 ;; This function is called by:
  2052 ;;		_processCmdIN
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _pow
  2058  0590                     _pow:	
  2059                           
  2060                           ;main.c: 154: int result = 1;
  2061                           
  2062                           ;incstack = 0
  2063                           ; Regs used in _pow: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2064  0590  3001               	movlw	1
  2065  0591  1283               	bcf	3,5	;RP0=0, select bank0
  2066  0592  1303               	bcf	3,6	;RP1=0, select bank0
  2067  0593  00AB               	movwf	pow@result
  2068  0594  3000               	movlw	0
  2069  0595  00AC               	movwf	pow@result+1
  2070                           
  2071                           ;main.c: 155: if (b > 0)
  2072  0596  0829               	movf	pow@b+1,w
  2073  0597  3A80               	xorlw	128
  2074  0598  00FF               	movwf	127
  2075  0599  3080               	movlw	128
  2076  059A  027F               	subwf	127,w
  2077  059B  1D03               	skipz
  2078  059C  2D9F               	goto	u785
  2079  059D  3001               	movlw	1
  2080  059E  0228               	subwf	pow@b,w
  2081  059F                     u785:	
  2082  059F  1C03               	skipc
  2083  05A0  2DD8               	goto	l1356
  2084                           
  2085                           ;main.c: 156: for (int i=1; i<=b; i++)
  2086  05A1  3001               	movlw	1
  2087  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  2088  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  2089  05A4  00AD               	movwf	pow@i
  2090  05A5  3000               	movlw	0
  2091  05A6  00AE               	movwf	pow@i+1
  2092  05A7  0829               	movf	pow@b+1,w
  2093  05A8  3A80               	xorlw	128
  2094  05A9  00AA               	movwf	??_pow
  2095  05AA  082E               	movf	pow@i+1,w
  2096  05AB  3A80               	xorlw	128
  2097  05AC  022A               	subwf	??_pow,w
  2098  05AD  1D03               	skipz
  2099  05AE  2DB1               	goto	u795
  2100  05AF  082D               	movf	pow@i,w
  2101  05B0  0228               	subwf	pow@b,w
  2102  05B1                     u795:	
  2103  05B1  1C03               	btfss	3,0
  2104  05B2  2DD8               	goto	l1356
  2105  05B3                     l1350:	
  2106                           
  2107                           ;main.c: 157: result *= a;
  2108  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  2109  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  2110  05B5  0827               	movf	pow@a+1,w
  2111  05B6  00A1               	movwf	___wmul@multiplier+1
  2112  05B7  0826               	movf	pow@a,w
  2113  05B8  00A0               	movwf	___wmul@multiplier
  2114  05B9  082C               	movf	pow@result+1,w
  2115  05BA  00A3               	movwf	___wmul@multiplicand+1
  2116  05BB  082B               	movf	pow@result,w
  2117  05BC  00A2               	movwf	___wmul@multiplicand
  2118  05BD  118A  2649  118A   	fcall	___wmul
  2119  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  2120  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  2121  05C2  0821               	movf	?___wmul+1,w
  2122  05C3  00AC               	movwf	pow@result+1
  2123  05C4  0820               	movf	?___wmul,w
  2124  05C5  00AB               	movwf	pow@result
  2125  05C6  3001               	movlw	1
  2126  05C7  07AD               	addwf	pow@i,f
  2127  05C8  1803               	skipnc
  2128  05C9  0AAE               	incf	pow@i+1,f
  2129  05CA  3000               	movlw	0
  2130  05CB  07AE               	addwf	pow@i+1,f
  2131  05CC  0829               	movf	pow@b+1,w
  2132  05CD  3A80               	xorlw	128
  2133  05CE  00AA               	movwf	??_pow
  2134  05CF  082E               	movf	pow@i+1,w
  2135  05D0  3A80               	xorlw	128
  2136  05D1  022A               	subwf	??_pow,w
  2137  05D2  1D03               	skipz
  2138  05D3  2DD6               	goto	u805
  2139  05D4  082D               	movf	pow@i,w
  2140  05D5  0228               	subwf	pow@b,w
  2141  05D6                     u805:	
  2142  05D6  1803               	skipnc
  2143  05D7  2DB3               	goto	l1350
  2144  05D8                     l1356:	
  2145                           
  2146                           ;main.c: 158: return result;
  2147  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  2148  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  2149  05DA  082C               	movf	pow@result+1,w
  2150  05DB  00A7               	movwf	?_pow+1
  2151  05DC  082B               	movf	pow@result,w
  2152  05DD  00A6               	movwf	?_pow
  2153  05DE  0008               	return
  2154  05DF                     __end_of_pow:	
  2155                           
  2156                           	psect	text4
  2157  06F7                     __ptext4:	
  2158 ;; *************** function _isdigit *****************
  2159 ;; Defined at:
  2160 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  c               1    wreg     unsigned char 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  c               1    1[BANK0 ] unsigned char 
  2165 ;; Return value:  Size  Location     Type
  2166 ;;		None               void
  2167 ;; Registers used:
  2168 ;;		wreg, status,2, status,0
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2174 ;;      Params:         0       0       0       0
  2175 ;;      Locals:         0       2       0       0
  2176 ;;      Temps:          0       0       0       0
  2177 ;;      Totals:         0       2       0       0
  2178 ;;Total ram usage:        2 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    4
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_processCmdIN
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           
  2189                           ;psect for function _isdigit
  2190  06F7                     _isdigit:	
  2191                           
  2192                           ;incstack = 0
  2193                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2194                           ;isdigit@c stored from wreg
  2195  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2196  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2197  06F9  00A1               	movwf	isdigit@c
  2198  06FA  01A0               	clrf	_isdigit$573
  2199  06FB  303A               	movlw	58
  2200  06FC  0221               	subwf	isdigit@c,w
  2201  06FD  1803               	skipnc
  2202  06FE  2F05               	goto	l1438
  2203  06FF  3030               	movlw	48
  2204  0700  0221               	subwf	isdigit@c,w
  2205  0701  1C03               	skipc
  2206  0702  2F05               	goto	l1438
  2207  0703  01A0               	clrf	_isdigit$573
  2208  0704  0AA0               	incf	_isdigit$573,f
  2209  0705                     l1438:	
  2210  0705  0C20               	rrf	_isdigit$573,w
  2211  0706  0008               	return
  2212  0707                     __end_of_isdigit:	
  2213                           
  2214                           	psect	text5
  2215  071F                     __ptext5:	
  2216 ;; *************** function _fast_delay_ms *****************
  2217 ;; Defined at:
  2218 ;;		line 170 in file "main.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2232 ;;      Params:         0       0       0       0
  2233 ;;      Locals:         0       0       0       0
  2234 ;;      Temps:          0       2       0       0
  2235 ;;      Totals:         0       2       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    4
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		_processCmdIN
  2243 ;;		_main
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           
  2248                           ;psect for function _fast_delay_ms
  2249  071F                     _fast_delay_ms:	
  2250                           
  2251                           ;main.c: 172: _delay((unsigned long)((50)*(4000000/4000.0)));
  2252                           
  2253                           ;incstack = 0
  2254                           ; Regs used in _fast_delay_ms: [wreg]
  2255  071F  3041               	movlw	65
  2256  0720  1283               	bcf	3,5	;RP0=0, select bank0
  2257  0721  1303               	bcf	3,6	;RP1=0, select bank0
  2258  0722  00A1               	movwf	??_fast_delay_ms+1
  2259  0723  30EE               	movlw	238
  2260  0724  00A0               	movwf	??_fast_delay_ms
  2261  0725                     u1337:	
  2262  0725  0BA0               	decfsz	??_fast_delay_ms,f
  2263  0726  2F25               	goto	u1337
  2264  0727  0BA1               	decfsz	??_fast_delay_ms+1,f
  2265  0728  2F25               	goto	u1337
  2266  0729  0008               	return
  2267  072A                     __end_of_fast_delay_ms:	
  2268                           
  2269                           	psect	text6
  2270  072A                     __ptext6:	
  2271 ;; *************** function _ctoi *****************
  2272 ;; Defined at:
  2273 ;;		line 148 in file "main.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;  c               1    wreg     unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  c               1    3[BANK0 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2    0[BANK0 ] int 
  2280 ;; Registers used:
  2281 ;;		wreg
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       3       0       0
  2288 ;;      Locals:         0       1       0       0
  2289 ;;      Temps:          0       0       0       0
  2290 ;;      Totals:         0       4       0       0
  2291 ;;Total ram usage:        4 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_processCmdIN
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _ctoi
  2303  072A                     _ctoi:	
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _ctoi: [wreg]
  2307                           ;ctoi@c stored from wreg
  2308  072A  1283               	bcf	3,5	;RP0=0, select bank0
  2309  072B  1303               	bcf	3,6	;RP1=0, select bank0
  2310  072C  00A3               	movwf	ctoi@c
  2311                           
  2312                           ;main.c: 150: return c - '0';
  2313  072D  0823               	movf	ctoi@c,w
  2314  072E  3ED0               	addlw	208
  2315  072F  00A0               	movwf	?_ctoi
  2316  0730  30FF               	movlw	255
  2317  0731  1803               	skipnc
  2318  0732  3000               	movlw	0
  2319  0733  00A1               	movwf	?_ctoi+1
  2320  0734  0008               	return
  2321  0735                     __end_of_ctoi:	
  2322                           
  2323                           	psect	text7
  2324  05DF                     __ptext7:	
  2325 ;; *************** function ___lmul *****************
  2326 ;; Defined at:
  2327 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  multiplier      4   15[BANK0 ] unsigned long 
  2330 ;;  multiplicand    4   19[BANK0 ] unsigned long 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  product         4   24[BANK0 ] unsigned long 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  4   15[BANK0 ] unsigned long 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2342 ;;      Params:         0       8       0       0
  2343 ;;      Locals:         0       4       0       0
  2344 ;;      Temps:          0       1       0       0
  2345 ;;      Totals:         0      13       0       0
  2346 ;;Total ram usage:       13 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    4
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_processCmdIN
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function ___lmul
  2358  05DF                     ___lmul:	
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2362  05DF  3000               	movlw	0
  2363  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  2364  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  2365  05E2  00BB               	movwf	___lmul@product+3
  2366  05E3  3000               	movlw	0
  2367  05E4  00BA               	movwf	___lmul@product+2
  2368  05E5  3000               	movlw	0
  2369  05E6  00B9               	movwf	___lmul@product+1
  2370  05E7  3000               	movlw	0
  2371  05E8  00B8               	movwf	___lmul@product
  2372  05E9                     l1446:	
  2373  05E9  1C2F               	btfss	___lmul@multiplier,0
  2374  05EA  2DFF               	goto	l1450
  2375  05EB  0833               	movf	___lmul@multiplicand,w
  2376  05EC  07B8               	addwf	___lmul@product,f
  2377  05ED  0834               	movf	___lmul@multiplicand+1,w
  2378  05EE  1103               	clrz
  2379  05EF  1803               	skipnc
  2380  05F0  3E01               	addlw	1
  2381  05F1  1D03               	btfss	3,2
  2382  05F2  07B9               	addwf	___lmul@product+1,f
  2383  05F3  0835               	movf	___lmul@multiplicand+2,w
  2384  05F4  1103               	clrz
  2385  05F5  1803               	skipnc
  2386  05F6  3E01               	addlw	1
  2387  05F7  1D03               	btfss	3,2
  2388  05F8  07BA               	addwf	___lmul@product+2,f
  2389  05F9  0836               	movf	___lmul@multiplicand+3,w
  2390  05FA  1103               	clrz
  2391  05FB  1803               	skipnc
  2392  05FC  3E01               	addlw	1
  2393  05FD  1D03               	btfss	3,2
  2394  05FE  07BB               	addwf	___lmul@product+3,f
  2395  05FF                     l1450:	
  2396  05FF  3001               	movlw	1
  2397  0600  00B7               	movwf	??___lmul
  2398  0601                     u965:	
  2399  0601  1003               	clrc
  2400  0602  0DB3               	rlf	___lmul@multiplicand,f
  2401  0603  0DB4               	rlf	___lmul@multiplicand+1,f
  2402  0604  0DB5               	rlf	___lmul@multiplicand+2,f
  2403  0605  0DB6               	rlf	___lmul@multiplicand+3,f
  2404  0606  0BB7               	decfsz	??___lmul,f
  2405  0607  2E01               	goto	u965
  2406  0608  3001               	movlw	1
  2407  0609                     u975:	
  2408  0609  1003               	clrc
  2409  060A  0CB2               	rrf	___lmul@multiplier+3,f
  2410  060B  0CB1               	rrf	___lmul@multiplier+2,f
  2411  060C  0CB0               	rrf	___lmul@multiplier+1,f
  2412  060D  0CAF               	rrf	___lmul@multiplier,f
  2413  060E  3EFF               	addlw	-1
  2414  060F  1D03               	skipz
  2415  0610  2E09               	goto	u975
  2416  0611  0832               	movf	___lmul@multiplier+3,w
  2417  0612  0431               	iorwf	___lmul@multiplier+2,w
  2418  0613  0430               	iorwf	___lmul@multiplier+1,w
  2419  0614  042F               	iorwf	___lmul@multiplier,w
  2420  0615  1D03               	skipz
  2421  0616  2DE9               	goto	l1446
  2422  0617  083B               	movf	___lmul@product+3,w
  2423  0618  00B2               	movwf	?___lmul+3
  2424  0619  083A               	movf	___lmul@product+2,w
  2425  061A  00B1               	movwf	?___lmul+2
  2426  061B  0839               	movf	___lmul@product+1,w
  2427  061C  00B0               	movwf	?___lmul+1
  2428  061D  0838               	movf	___lmul@product,w
  2429  061E  00AF               	movwf	?___lmul
  2430  061F  0008               	return
  2431  0620                     __end_of___lmul:	
  2432                           
  2433                           	psect	text8
  2434  0273                     __ptext8:	
  2435 ;; *************** function _CmdMultiChannel *****************
  2436 ;; Defined at:
  2437 ;;		line 199 in file "main.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  chanToActive    2   18[BANK0 ] unsigned int 
  2440 ;;  delay           4   20[BANK0 ] unsigned long 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  i               2   28[BANK0 ] int 
  2443 ;;  nbChange        2   30[BANK0 ] unsigned int 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2453 ;;      Params:         0       6       0       0
  2454 ;;      Locals:         0       4       0       0
  2455 ;;      Temps:          0       4       0       0
  2456 ;;      Totals:         0      14       0       0
  2457 ;;Total ram usage:       14 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    6
  2460 ;; This function calls:
  2461 ;;		_CommandChannel
  2462 ;;		_ProcessReadChannel
  2463 ;;		_delay_ms
  2464 ;;		_print_tx
  2465 ;;		_printci_tx
  2466 ;; This function is called by:
  2467 ;;		_processCmdIN
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           
  2472                           ;psect for function _CmdMultiChannel
  2473  0273                     _CmdMultiChannel:	
  2474                           
  2475                           ;main.c: 201: unsigned int nbChange = 0;
  2476                           
  2477                           ;incstack = 0
  2478                           ; Regs used in _CmdMultiChannel: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2479  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2480  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2481  0275  01BE               	clrf	CmdMultiChannel@nbChange
  2482  0276  01BF               	clrf	CmdMultiChannel@nbChange+1
  2483                           
  2484                           ;main.c: 202: ProcessReadChannel ();
  2485  0277  118A  23F8  118A   	fcall	_ProcessReadChannel
  2486                           
  2487                           ;main.c: 203: if (DebugMode == TRUE) {print_tx("MultiChannel:",13);printci_tx('c',channe
      +                          l);printci_tx('l',lastActiveChannel);}
  2488  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2489  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2490  027C  035F               	decf	_DebugMode,w
  2491  027D  1D03               	btfss	3,2
  2492  027E  2A9B               	goto	l1374
  2493  027F  300D               	movlw	13
  2494  0280  00A1               	movwf	print_tx@len
  2495  0281  3000               	movlw	0
  2496  0282  00A2               	movwf	print_tx@len+1
  2497  0283  3011               	movlw	(low (((STR_5+1)-__stringbase)| (0+32768)))& (0+255)
  2498  0284  118A  2620  118A   	fcall	_print_tx
  2499  0287  1283               	bcf	3,5	;RP0=0, select bank0
  2500  0288  1303               	bcf	3,6	;RP1=0, select bank0
  2501  0289  085E               	movf	_channel+1,w	;volatile
  2502  028A  00A3               	movwf	printci_tx@i+1
  2503  028B  085D               	movf	_channel,w	;volatile
  2504  028C  00A2               	movwf	printci_tx@i
  2505  028D  3063               	movlw	99
  2506  028E  118A  268E  118A   	fcall	_printci_tx
  2507  0291  1283               	bcf	3,5	;RP0=0, select bank0
  2508  0292  1303               	bcf	3,6	;RP1=0, select bank0
  2509  0293  085C               	movf	_lastActiveChannel+1,w	;volatile
  2510  0294  00A3               	movwf	printci_tx@i+1
  2511  0295  085B               	movf	_lastActiveChannel,w	;volatile
  2512  0296  00A2               	movwf	printci_tx@i
  2513  0297  306C               	movlw	108
  2514  0298  118A  268E  118A   	fcall	_printci_tx
  2515  029B                     l1374:	
  2516                           
  2517                           ;main.c: 204: if (lastActiveChannel == 0)
  2518  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2519  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2520  029D  085B               	movf	_lastActiveChannel,w	;volatile
  2521  029E  045C               	iorwf	_lastActiveChannel+1,w	;volatile
  2522  029F  1D03               	btfss	3,2
  2523  02A0  2ADD               	goto	l1392
  2524                           
  2525                           ;main.c: 205: {
  2526                           ;main.c: 206: if (DebugMode == TRUE) print_tx("firstcall",9);
  2527  02A1  035F               	decf	_DebugMode,w
  2528  02A2  1D03               	btfss	3,2
  2529  02A3  2AAC               	goto	l1380
  2530  02A4  3009               	movlw	9
  2531  02A5  00A1               	movwf	print_tx@len
  2532  02A6  3000               	movlw	0
  2533  02A7  00A2               	movwf	print_tx@len+1
  2534  02A8  3042               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2535  02A9  118A  2620  118A   	fcall	_print_tx
  2536  02AC                     l1380:	
  2537                           
  2538                           ;main.c: 207: CommandChannel(delay);
  2539  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  2540  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  2541  02AE  0837               	movf	CmdMultiChannel@delay+3,w
  2542  02AF  00A8               	movwf	CommandChannel@d+3
  2543  02B0  0836               	movf	CmdMultiChannel@delay+2,w
  2544  02B1  00A7               	movwf	CommandChannel@d+2
  2545  02B2  0835               	movf	CmdMultiChannel@delay+1,w
  2546  02B3  00A6               	movwf	CommandChannel@d+1
  2547  02B4  0834               	movf	CmdMultiChannel@delay,w
  2548  02B5  00A5               	movwf	CommandChannel@d
  2549  02B6  118A  26C2  118A   	fcall	_CommandChannel
  2550                           
  2551                           ;main.c: 208: ProcessReadChannel ();
  2552  02B9  118A  23F8  118A   	fcall	_ProcessReadChannel
  2553                           
  2554                           ;main.c: 209: if (DebugMode == TRUE) {print_tx("/firstcall:",11);printci_tx('c',channel)
      +                          ;printci_tx('l',lastActiveChannel);}
  2555  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2556  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2557  02BE  035F               	decf	_DebugMode,w
  2558  02BF  1D03               	btfss	3,2
  2559  02C0  2ADD               	goto	l1392
  2560  02C1  300B               	movlw	11
  2561  02C2  00A1               	movwf	print_tx@len
  2562  02C3  3000               	movlw	0
  2563  02C4  00A2               	movwf	print_tx@len+1
  2564  02C5  302B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2565  02C6  118A  2620  118A   	fcall	_print_tx
  2566  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2567  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  2568  02CB  085E               	movf	_channel+1,w	;volatile
  2569  02CC  00A3               	movwf	printci_tx@i+1
  2570  02CD  085D               	movf	_channel,w	;volatile
  2571  02CE  00A2               	movwf	printci_tx@i
  2572  02CF  3063               	movlw	99
  2573  02D0  118A  268E  118A   	fcall	_printci_tx
  2574  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2575  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2576  02D5  085C               	movf	_lastActiveChannel+1,w	;volatile
  2577  02D6  00A3               	movwf	printci_tx@i+1
  2578  02D7  085B               	movf	_lastActiveChannel,w	;volatile
  2579  02D8  00A2               	movwf	printci_tx@i
  2580  02D9  306C               	movlw	108
  2581  02DA  118A  268E  118A   	fcall	_printci_tx
  2582  02DD                     l1392:	
  2583                           
  2584                           ;main.c: 210: }
  2585                           ;main.c: 213: if (chanToActive == lastActiveChannel)
  2586  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  2587  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  2588  02DF  085C               	movf	_lastActiveChannel+1,w	;volatile
  2589  02E0  0633               	xorwf	CmdMultiChannel@chanToActive+1,w
  2590  02E1  1D03               	skipz
  2591  02E2  2AE5               	goto	u855
  2592  02E3  085B               	movf	_lastActiveChannel,w	;volatile
  2593  02E4  0632               	xorwf	CmdMultiChannel@chanToActive,w
  2594  02E5                     u855:	
  2595  02E5  1903               	btfsc	3,2
  2596  02E6  0008               	return
  2597                           
  2598                           ;main.c: 215: else if (chanToActive < lastActiveChannel)
  2599                           
  2600                           ;main.c: 214: return;
  2601  02E7  085C               	movf	_lastActiveChannel+1,w	;volatile
  2602  02E8  0233               	subwf	CmdMultiChannel@chanToActive+1,w
  2603  02E9  1D03               	skipz
  2604  02EA  2AED               	goto	u865
  2605  02EB  085B               	movf	_lastActiveChannel,w	;volatile
  2606  02EC  0232               	subwf	CmdMultiChannel@chanToActive,w
  2607  02ED                     u865:	
  2608  02ED  1803               	skipnc
  2609  02EE  2B06               	goto	l1402
  2610                           
  2611                           ;main.c: 216: nbChange = (5 + chanToActive) - lastActiveChannel ;
  2612  02EF  095B               	comf	_lastActiveChannel,w	;volatile
  2613  02F0  00B8               	movwf	??_CmdMultiChannel
  2614  02F1  095C               	comf	_lastActiveChannel+1,w	;volatile
  2615  02F2  00B9               	movwf	??_CmdMultiChannel+1
  2616  02F3  0AB8               	incf	??_CmdMultiChannel,f
  2617  02F4  1903               	skipnz
  2618  02F5  0AB9               	incf	??_CmdMultiChannel+1,f
  2619  02F6  0832               	movf	CmdMultiChannel@chanToActive,w
  2620  02F7  0738               	addwf	??_CmdMultiChannel,w
  2621  02F8  00BA               	movwf	??_CmdMultiChannel+2
  2622  02F9  0833               	movf	CmdMultiChannel@chanToActive+1,w
  2623  02FA  1803               	skipnc
  2624  02FB  0A33               	incf	CmdMultiChannel@chanToActive+1,w
  2625  02FC  0739               	addwf	??_CmdMultiChannel+1,w
  2626  02FD  00BB               	movwf	??_CmdMultiChannel+3
  2627  02FE  083A               	movf	??_CmdMultiChannel+2,w
  2628  02FF  3E05               	addlw	5
  2629  0300  00BE               	movwf	CmdMultiChannel@nbChange
  2630  0301  083B               	movf	??_CmdMultiChannel+3,w
  2631  0302  1803               	skipnc
  2632  0303  3E01               	addlw	1
  2633  0304  3E00               	addlw	0
  2634  0305  2B1C               	goto	L8
  2635  0306                     l1402:	
  2636                           
  2637                           ;main.c: 217: else if (chanToActive > lastActiveChannel)
  2638  0306  0833               	movf	CmdMultiChannel@chanToActive+1,w
  2639  0307  025C               	subwf	_lastActiveChannel+1,w	;volatile
  2640  0308  1D03               	skipz
  2641  0309  2B0C               	goto	u875
  2642  030A  0832               	movf	CmdMultiChannel@chanToActive,w
  2643  030B  025B               	subwf	_lastActiveChannel,w	;volatile
  2644  030C                     u875:	
  2645  030C  1803               	skipnc
  2646  030D  2B1D               	goto	l136
  2647                           
  2648                           ;main.c: 218: nbChange = chanToActive - lastActiveChannel;
  2649  030E  095B               	comf	_lastActiveChannel,w	;volatile
  2650  030F  00B8               	movwf	??_CmdMultiChannel
  2651  0310  095C               	comf	_lastActiveChannel+1,w	;volatile
  2652  0311  00B9               	movwf	??_CmdMultiChannel+1
  2653  0312  0AB8               	incf	??_CmdMultiChannel,f
  2654  0313  1903               	skipnz
  2655  0314  0AB9               	incf	??_CmdMultiChannel+1,f
  2656  0315  0832               	movf	CmdMultiChannel@chanToActive,w
  2657  0316  0738               	addwf	??_CmdMultiChannel,w
  2658  0317  00BE               	movwf	CmdMultiChannel@nbChange
  2659  0318  0833               	movf	CmdMultiChannel@chanToActive+1,w
  2660  0319  1803               	skipnc
  2661  031A  0A33               	incf	CmdMultiChannel@chanToActive+1,w
  2662  031B  0739               	addwf	??_CmdMultiChannel+1,w
  2663  031C                     L8:	
  2664  031C  00BF               	movwf	CmdMultiChannel@nbChange+1
  2665  031D                     l136:	
  2666                           
  2667                           ;main.c: 220: if (channel == 0) nbChange++;
  2668  031D  085D               	movf	_channel,w	;volatile
  2669  031E  045E               	iorwf	_channel+1,w	;volatile
  2670  031F  1D03               	btfss	3,2
  2671  0320  2B27               	goto	l1408
  2672  0321  3001               	movlw	1
  2673  0322  07BE               	addwf	CmdMultiChannel@nbChange,f
  2674  0323  1803               	skipnc
  2675  0324  0ABF               	incf	CmdMultiChannel@nbChange+1,f
  2676  0325  3000               	movlw	0
  2677  0326  07BF               	addwf	CmdMultiChannel@nbChange+1,f
  2678  0327                     l1408:	
  2679                           
  2680                           ;main.c: 222: if (DebugMode == TRUE) {print_tx("NbChange",8);printci_tx('=',nbChange);}
  2681  0327  035F               	decf	_DebugMode,w
  2682  0328  1D03               	btfss	3,2
  2683  0329  2B3C               	goto	l1414
  2684  032A  3008               	movlw	8
  2685  032B  00A1               	movwf	print_tx@len
  2686  032C  3000               	movlw	0
  2687  032D  00A2               	movwf	print_tx@len+1
  2688  032E  304C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2689  032F  118A  2620  118A   	fcall	_print_tx
  2690  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2691  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2692  0334  083F               	movf	CmdMultiChannel@nbChange+1,w
  2693  0335  00A3               	movwf	printci_tx@i+1
  2694  0336  083E               	movf	CmdMultiChannel@nbChange,w
  2695  0337  00A2               	movwf	printci_tx@i
  2696  0338  303D               	movlw	61
  2697  0339  118A  268E  118A   	fcall	_printci_tx
  2698  033C                     l1414:	
  2699                           
  2700                           ;main.c: 224: for (int i=0; i < nbChange; i++)
  2701  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2702  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2703  033E  01BC               	clrf	CmdMultiChannel@i
  2704  033F  01BD               	clrf	CmdMultiChannel@i+1
  2705  0340                     l1420:	
  2706  0340  083F               	movf	CmdMultiChannel@nbChange+1,w
  2707  0341  023D               	subwf	CmdMultiChannel@i+1,w
  2708  0342  1D03               	skipz
  2709  0343  2B46               	goto	u905
  2710  0344  083E               	movf	CmdMultiChannel@nbChange,w
  2711  0345  023C               	subwf	CmdMultiChannel@i,w
  2712  0346                     u905:	
  2713  0346  1803               	btfsc	3,0
  2714  0347  2B65               	goto	l1422
  2715                           
  2716                           ;main.c: 225: {
  2717                           ;main.c: 226: CommandChannel(delay);
  2718  0348  0837               	movf	CmdMultiChannel@delay+3,w
  2719  0349  00A8               	movwf	CommandChannel@d+3
  2720  034A  0836               	movf	CmdMultiChannel@delay+2,w
  2721  034B  00A7               	movwf	CommandChannel@d+2
  2722  034C  0835               	movf	CmdMultiChannel@delay+1,w
  2723  034D  00A6               	movwf	CommandChannel@d+1
  2724  034E  0834               	movf	CmdMultiChannel@delay,w
  2725  034F  00A5               	movwf	CommandChannel@d
  2726  0350  118A  26C2  118A   	fcall	_CommandChannel
  2727                           
  2728                           ;main.c: 227: delay_ms(delay);
  2729  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0355  0835               	movf	CmdMultiChannel@delay+1,w
  2732  0356  00A1               	movwf	delay_ms@x+1
  2733  0357  0834               	movf	CmdMultiChannel@delay,w
  2734  0358  00A0               	movwf	delay_ms@x
  2735  0359  118A  266C  118A   	fcall	_delay_ms
  2736  035C  3001               	movlw	1
  2737  035D  1283               	bcf	3,5	;RP0=0, select bank0
  2738  035E  1303               	bcf	3,6	;RP1=0, select bank0
  2739  035F  07BC               	addwf	CmdMultiChannel@i,f
  2740  0360  1803               	skipnc
  2741  0361  0ABD               	incf	CmdMultiChannel@i+1,f
  2742  0362  3000               	movlw	0
  2743  0363  07BD               	addwf	CmdMultiChannel@i+1,f
  2744  0364  2B40               	goto	l1420
  2745  0365                     l1422:	
  2746                           
  2747                           ;main.c: 228: }
  2748                           ;main.c: 229: ProcessReadChannel ();
  2749  0365  118A  23F8  118A   	fcall	_ProcessReadChannel
  2750                           
  2751                           ;main.c: 230: if (DebugMode == TRUE)
  2752  0368  1283               	bcf	3,5	;RP0=0, select bank0
  2753  0369  1303               	bcf	3,6	;RP1=0, select bank0
  2754  036A  035F               	decf	_DebugMode,w
  2755  036B  1D03               	btfss	3,2
  2756  036C  0008               	return
  2757                           
  2758                           ;main.c: 231: {
  2759                           ;main.c: 232: printci_tx('c',channel);
  2760  036D  085E               	movf	_channel+1,w	;volatile
  2761  036E  00A3               	movwf	printci_tx@i+1
  2762  036F  085D               	movf	_channel,w	;volatile
  2763  0370  00A2               	movwf	printci_tx@i
  2764  0371  3063               	movlw	99
  2765  0372  118A  268E  118A   	fcall	_printci_tx
  2766                           
  2767                           ;main.c: 233: printci_tx('l',lastActiveChannel);
  2768  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2770  0377  085C               	movf	_lastActiveChannel+1,w	;volatile
  2771  0378  00A3               	movwf	printci_tx@i+1
  2772  0379  085B               	movf	_lastActiveChannel,w	;volatile
  2773  037A  00A2               	movwf	printci_tx@i
  2774  037B  306C               	movlw	108
  2775  037C  118A  268E  118A   	fcall	_printci_tx
  2776                           
  2777                           ;main.c: 234: print_tx("/MultiChannel:",14);
  2778  037F  300E               	movlw	14
  2779  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0381  1303               	bcf	3,6	;RP1=0, select bank0
  2781  0382  00A1               	movwf	print_tx@len
  2782  0383  3000               	movlw	0
  2783  0384  00A2               	movwf	print_tx@len+1
  2784  0385  3010               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2785  0386  118A  2620         	fcall	_print_tx
  2786  0388  0008               	return
  2787  0389                     __end_of_CmdMultiChannel:	
  2788                           
  2789                           	psect	text9
  2790  068E                     __ptext9:	
  2791 ;; *************** function _printci_tx *****************
  2792 ;; Defined at:
  2793 ;;		line 32 in file "usart.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  c               1    wreg     const unsigned char 
  2796 ;;  i               2    2[BANK0 ] unsigned int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  c               1    4[BANK0 ] const unsigned char 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, pclath, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2808 ;;      Params:         0       2       0       0
  2809 ;;      Locals:         0       1       0       0
  2810 ;;      Temps:          0       0       0       0
  2811 ;;      Totals:         0       3       0       0
  2812 ;;Total ram usage:        3 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    5
  2815 ;; This function calls:
  2816 ;;		_itoc
  2817 ;;		_putch
  2818 ;; This function is called by:
  2819 ;;		_CmdMultiChannel
  2820 ;;		_processCmdIN
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           
  2825                           ;psect for function _printci_tx
  2826  068E                     _printci_tx:	
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _printci_tx: [wreg+status,2+status,0+pclath+cstack]
  2830                           ;printci_tx@c stored from wreg
  2831  068E  1283               	bcf	3,5	;RP0=0, select bank0
  2832  068F  1303               	bcf	3,6	;RP1=0, select bank0
  2833  0690  00A4               	movwf	printci_tx@c
  2834                           
  2835                           ;usart.c: 34: putch(0x02);
  2836  0691  3002               	movlw	2
  2837  0692  118A  2746  118A   	fcall	_putch
  2838                           
  2839                           ;usart.c: 35: putch(c);
  2840  0695  1283               	bcf	3,5	;RP0=0, select bank0
  2841  0696  1303               	bcf	3,6	;RP1=0, select bank0
  2842  0697  0824               	movf	printci_tx@c,w
  2843  0698  118A  2746  118A   	fcall	_putch
  2844                           
  2845                           ;usart.c: 36: putch(itoc(i));
  2846  069B  1283               	bcf	3,5	;RP0=0, select bank0
  2847  069C  1303               	bcf	3,6	;RP1=0, select bank0
  2848  069D  0823               	movf	printci_tx@i+1,w
  2849  069E  00A1               	movwf	itoc@i+1
  2850  069F  0822               	movf	printci_tx@i,w
  2851  06A0  00A0               	movwf	itoc@i
  2852  06A1  118A  275C  118A   	fcall	_itoc
  2853  06A4  118A  2746  118A   	fcall	_putch
  2854                           
  2855                           ;usart.c: 37: putch(0x03);
  2856  06A7  3003               	movlw	3
  2857  06A8  118A  2746         	fcall	_putch
  2858  06AA  0008               	return
  2859  06AB                     __end_of_printci_tx:	
  2860                           
  2861                           	psect	text10
  2862  075C                     __ptext10:	
  2863 ;; *************** function _itoc *****************
  2864 ;; Defined at:
  2865 ;;		line 5 in file "usart.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  i               2    0[BANK0 ] int 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      unsigned char 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2879 ;;      Params:         0       2       0       0
  2880 ;;      Locals:         0       0       0       0
  2881 ;;      Temps:          0       0       0       0
  2882 ;;      Totals:         0       2       0       0
  2883 ;;Total ram usage:        2 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    4
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_printci_tx
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           
  2894                           ;psect for function _itoc
  2895  075C                     _itoc:	
  2896                           
  2897                           ;usart.c: 7: return i + '0';
  2898                           
  2899                           ;incstack = 0
  2900                           ; Regs used in _itoc: [wreg+status,2+status,0]
  2901  075C  1283               	bcf	3,5	;RP0=0, select bank0
  2902  075D  1303               	bcf	3,6	;RP1=0, select bank0
  2903  075E  0820               	movf	itoc@i,w
  2904  075F  3E30               	addlw	48
  2905  0760  0008               	return
  2906  0761                     __end_of_itoc:	
  2907                           
  2908                           	psect	text11
  2909  0620                     __ptext11:	
  2910 ;; *************** function _print_tx *****************
  2911 ;; Defined at:
  2912 ;;		line 17 in file "usart.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  str             1    wreg     PTR const unsigned char 
  2915 ;;		 -> STR_9(6), STR_8(15), STR_7(12), STR_6(11), 
  2916 ;;		 -> STR_5(15), STR_4(9), STR_3(12), STR_2(10), 
  2917 ;;		 -> STR_1(14), 
  2918 ;;  len             2    1[BANK0 ] unsigned int 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  str             1    5[BANK0 ] PTR const unsigned char 
  2921 ;;		 -> STR_9(6), STR_8(15), STR_7(12), STR_6(11), 
  2922 ;;		 -> STR_5(15), STR_4(9), STR_3(12), STR_2(10), 
  2923 ;;		 -> STR_1(14), 
  2924 ;;  i               2    3[BANK0 ] int 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2934 ;;      Params:         0       2       0       0
  2935 ;;      Locals:         0       3       0       0
  2936 ;;      Temps:          0       0       0       0
  2937 ;;      Totals:         0       5       0       0
  2938 ;;Total ram usage:        5 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    5
  2941 ;; This function calls:
  2942 ;;		_putch
  2943 ;; This function is called by:
  2944 ;;		_CmdMultiChannel
  2945 ;;		_processCmdIN
  2946 ;;		_main
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           
  2951                           ;psect for function _print_tx
  2952  0620                     _print_tx:	
  2953                           
  2954                           ;incstack = 0
  2955                           ; Regs used in _print_tx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2956                           ;print_tx@str stored from wreg
  2957  0620  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0621  1303               	bcf	3,6	;RP1=0, select bank0
  2959  0622  00A5               	movwf	print_tx@str
  2960                           
  2961                           ;usart.c: 19: putch(0x02);
  2962  0623  3002               	movlw	2
  2963  0624  118A  2746  118A   	fcall	_putch
  2964                           
  2965                           ;usart.c: 20: for (int i=0; i<len; i++)
  2966  0627  1283               	bcf	3,5	;RP0=0, select bank0
  2967  0628  1303               	bcf	3,6	;RP1=0, select bank0
  2968  0629  01A3               	clrf	print_tx@i
  2969  062A  01A4               	clrf	print_tx@i+1
  2970  062B                     l1324:	
  2971  062B  0822               	movf	print_tx@len+1,w
  2972  062C  0224               	subwf	print_tx@i+1,w
  2973  062D  1D03               	skipz
  2974  062E  2E31               	goto	u765
  2975  062F  0821               	movf	print_tx@len,w
  2976  0630  0223               	subwf	print_tx@i,w
  2977  0631                     u765:	
  2978  0631  1803               	btfsc	3,0
  2979  0632  2E45               	goto	l1326
  2980                           
  2981                           ;usart.c: 21: putch(str[i]);
  2982  0633  0823               	movf	print_tx@i,w
  2983  0634  0725               	addwf	print_tx@str,w
  2984  0635  0084               	movwf	4
  2985  0636  118A  2530  118A   	fcall	stringdir
  2986  0639  118A  2746  118A   	fcall	_putch
  2987  063C  3001               	movlw	1
  2988  063D  1283               	bcf	3,5	;RP0=0, select bank0
  2989  063E  1303               	bcf	3,6	;RP1=0, select bank0
  2990  063F  07A3               	addwf	print_tx@i,f
  2991  0640  1803               	skipnc
  2992  0641  0AA4               	incf	print_tx@i+1,f
  2993  0642  3000               	movlw	0
  2994  0643  07A4               	addwf	print_tx@i+1,f
  2995  0644  2E2B               	goto	l1324
  2996  0645                     l1326:	
  2997                           
  2998                           ;usart.c: 22: putch(0x03);
  2999  0645  3003               	movlw	3
  3000  0646  118A  2746         	fcall	_putch
  3001  0648  0008               	return
  3002  0649                     __end_of_print_tx:	
  3003                           
  3004                           	psect	text12
  3005  0746                     __ptext12:	
  3006 ;; *************** function _putch *****************
  3007 ;; Defined at:
  3008 ;;		line 10 in file "usart.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  byte            1    wreg     unsigned char 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  byte            1    0[BANK0 ] unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3022 ;;      Params:         0       0       0       0
  3023 ;;      Locals:         0       1       0       0
  3024 ;;      Temps:          0       0       0       0
  3025 ;;      Totals:         0       1       0       0
  3026 ;;Total ram usage:        1 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    4
  3029 ;; This function calls:
  3030 ;;		Nothing
  3031 ;; This function is called by:
  3032 ;;		_print_tx
  3033 ;;		_printc_tx
  3034 ;;		_printci_tx
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _putch
  3040  0746                     _putch:	
  3041                           
  3042                           ;incstack = 0
  3043                           ; Regs used in _putch: [wreg]
  3044                           ;putch@byte stored from wreg
  3045  0746  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0747  1303               	bcf	3,6	;RP1=0, select bank0
  3047  0748  00A0               	movwf	putch@byte
  3048  0749                     l262:	
  3049                           ;usart.c: 13: continue;
  3050                           
  3051                           ;usart.c: 12: while(!TXIF)
  3052                           
  3053  0749  1C8C               	btfss	12,1	;volatile
  3054  074A  2F49               	goto	l262
  3055                           
  3056                           ;usart.c: 14: TXREG = byte;
  3057  074B  0820               	movf	putch@byte,w
  3058  074C  0095               	movwf	21	;volatile
  3059  074D  0008               	return
  3060  074E                     __end_of_putch:	
  3061                           
  3062                           	psect	text13
  3063  03F8                     __ptext13:	
  3064 ;; *************** function _ProcessReadChannel *****************
  3065 ;; Defined at:
  3066 ;;		line 183 in file "main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0, pclath, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3080 ;;      Params:         0       0       0       0
  3081 ;;      Locals:         0       0       0       0
  3082 ;;      Temps:          0      12       0       0
  3083 ;;      Totals:         0      12       0       0
  3084 ;;Total ram usage:       12 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    5
  3087 ;; This function calls:
  3088 ;;		___wmul
  3089 ;; This function is called by:
  3090 ;;		_CmdMultiChannel
  3091 ;;		_processCmdIN
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _ProcessReadChannel
  3097  03F8                     _ProcessReadChannel:	
  3098                           
  3099                           ;main.c: 185: channel = !RA0 + !RA1*2 + !RA2*3 + !RA3*4;
  3100                           
  3101                           ;incstack = 0
  3102                           ; Regs used in _ProcessReadChannel: [wreg+status,2+status,0+pclath+cstack]
  3103  03F8  1003               	clrc
  3104  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  3105  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  3106  03FB  1D85               	btfss	5,3	;volatile
  3107  03FC  1403               	setc
  3108  03FD  3000               	movlw	0
  3109  03FE  1803               	skipnc
  3110  03FF  3001               	movlw	1
  3111  0400  00A6               	movwf	??_ProcessReadChannel
  3112  0401  01A7               	clrf	??_ProcessReadChannel+1
  3113  0402  1003               	clrc
  3114  0403  0DA6               	rlf	??_ProcessReadChannel,f
  3115  0404  0DA7               	rlf	??_ProcessReadChannel+1,f
  3116  0405  1003               	clrc
  3117  0406  0DA6               	rlf	??_ProcessReadChannel,f
  3118  0407  0DA7               	rlf	??_ProcessReadChannel+1,f
  3119  0408  1003               	clrc
  3120  0409  1D05               	btfss	5,2	;volatile
  3121  040A  1403               	setc
  3122  040B  3000               	movlw	0
  3123  040C  1803               	skipnc
  3124  040D  3001               	movlw	1
  3125  040E  00A8               	movwf	??_ProcessReadChannel+2
  3126  040F  01A9               	clrf	??_ProcessReadChannel+3
  3127  0410  0828               	movf	??_ProcessReadChannel+2,w
  3128  0411  00A0               	movwf	___wmul@multiplier
  3129  0412  0829               	movf	??_ProcessReadChannel+3,w
  3130  0413  00A1               	movwf	___wmul@multiplier+1
  3131  0414  3003               	movlw	3
  3132  0415  00A2               	movwf	___wmul@multiplicand
  3133  0416  3000               	movlw	0
  3134  0417  00A3               	movwf	___wmul@multiplicand+1
  3135  0418  118A  2649  118A   	fcall	___wmul
  3136  041B  1003               	clrc
  3137  041C  1283               	bcf	3,5	;RP0=0, select bank0
  3138  041D  1303               	bcf	3,6	;RP1=0, select bank0
  3139  041E  1C85               	btfss	5,1	;volatile
  3140  041F  1403               	setc
  3141  0420  3000               	movlw	0
  3142  0421  1803               	skipnc
  3143  0422  3001               	movlw	1
  3144  0423  00AA               	movwf	??_ProcessReadChannel+4
  3145  0424  01AB               	clrf	??_ProcessReadChannel+5
  3146  0425  1003               	clrc
  3147  0426  0DAA               	rlf	??_ProcessReadChannel+4,f
  3148  0427  0DAB               	rlf	??_ProcessReadChannel+5,f
  3149  0428  1003               	clrc
  3150  0429  1C05               	btfss	5,0	;volatile
  3151  042A  1403               	setc
  3152  042B  3000               	movlw	0
  3153  042C  1803               	skipnc
  3154  042D  3001               	movlw	1
  3155  042E  072A               	addwf	??_ProcessReadChannel+4,w
  3156  042F  00AC               	movwf	??_ProcessReadChannel+6
  3157  0430  082B               	movf	??_ProcessReadChannel+5,w
  3158  0431  1803               	skipnc
  3159  0432  0A2B               	incf	??_ProcessReadChannel+5,w
  3160  0433  00AD               	movwf	??_ProcessReadChannel+7
  3161  0434  0820               	movf	?___wmul,w
  3162  0435  072C               	addwf	??_ProcessReadChannel+6,w
  3163  0436  00AE               	movwf	??_ProcessReadChannel+8
  3164  0437  0821               	movf	?___wmul+1,w
  3165  0438  1803               	skipnc
  3166  0439  0A21               	incf	?___wmul+1,w
  3167  043A  072D               	addwf	??_ProcessReadChannel+7,w
  3168  043B  00AF               	movwf	??_ProcessReadChannel+9
  3169  043C  0826               	movf	??_ProcessReadChannel,w
  3170  043D  072E               	addwf	??_ProcessReadChannel+8,w
  3171  043E  00B0               	movwf	??_ProcessReadChannel+10
  3172  043F  0827               	movf	??_ProcessReadChannel+1,w
  3173  0440  1803               	skipnc
  3174  0441  0A27               	incf	??_ProcessReadChannel+1,w
  3175  0442  072F               	addwf	??_ProcessReadChannel+9,w
  3176  0443  00B1               	movwf	??_ProcessReadChannel+11
  3177  0444  0830               	movf	??_ProcessReadChannel+10,w
  3178  0445  00DD               	movwf	_channel	;volatile
  3179  0446  0831               	movf	??_ProcessReadChannel+11,w
  3180  0447  00DE               	movwf	_channel+1	;volatile
  3181                           
  3182                           ;main.c: 186: if (channel == 10) channel = 5;
  3183  0448  300A               	movlw	10
  3184  0449  065D               	xorwf	_channel,w	;volatile
  3185  044A  045E               	iorwf	_channel+1,w	;volatile
  3186  044B  1D03               	btfss	3,2
  3187  044C  2C51               	goto	l1304
  3188  044D  3005               	movlw	5
  3189  044E  00DD               	movwf	_channel	;volatile
  3190  044F  3000               	movlw	0
  3191  0450  00DE               	movwf	_channel+1	;volatile
  3192  0451                     l1304:	
  3193                           
  3194                           ;main.c: 187: if (channel > 0 && channel <= 5) lastActiveChannel = channel;
  3195  0451  085D               	movf	_channel,w	;volatile
  3196  0452  045E               	iorwf	_channel+1,w	;volatile
  3197  0453  1903               	btfsc	3,2
  3198  0454  0008               	return
  3199  0455  3000               	movlw	0
  3200  0456  025E               	subwf	_channel+1,w	;volatile
  3201  0457  3006               	movlw	6
  3202  0458  1903               	skipnz
  3203  0459  025D               	subwf	_channel,w	;volatile
  3204  045A  1803               	skipnc
  3205  045B  0008               	return
  3206  045C  085E               	movf	_channel+1,w	;volatile
  3207  045D  00DC               	movwf	_lastActiveChannel+1	;volatile
  3208  045E  085D               	movf	_channel,w	;volatile
  3209  045F  00DB               	movwf	_lastActiveChannel	;volatile
  3210  0460  0008               	return
  3211  0461                     __end_of_ProcessReadChannel:	
  3212                           
  3213                           	psect	text14
  3214  0649                     __ptext14:	
  3215 ;; *************** function ___wmul *****************
  3216 ;; Defined at:
  3217 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3220 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  product         2    4[BANK0 ] unsigned int 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  2    0[BANK0 ] unsigned int 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3232 ;;      Params:         0       4       0       0
  3233 ;;      Locals:         0       2       0       0
  3234 ;;      Temps:          0       0       0       0
  3235 ;;      Totals:         0       6       0       0
  3236 ;;Total ram usage:        6 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    4
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_pow
  3243 ;;		_ProcessReadChannel
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           
  3248                           ;psect for function ___wmul
  3249  0649                     ___wmul:	
  3250                           
  3251                           ;incstack = 0
  3252                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3253  0649  1283               	bcf	3,5	;RP0=0, select bank0
  3254  064A  1303               	bcf	3,6	;RP1=0, select bank0
  3255  064B  01A4               	clrf	___wmul@product
  3256  064C  01A5               	clrf	___wmul@product+1
  3257  064D                     l1286:	
  3258  064D  1C20               	btfss	___wmul@multiplier,0
  3259  064E  2E55               	goto	l367
  3260  064F  0822               	movf	___wmul@multiplicand,w
  3261  0650  07A4               	addwf	___wmul@product,f
  3262  0651  1803               	skipnc
  3263  0652  0AA5               	incf	___wmul@product+1,f
  3264  0653  0823               	movf	___wmul@multiplicand+1,w
  3265  0654  07A5               	addwf	___wmul@product+1,f
  3266  0655                     l367:	
  3267  0655  3001               	movlw	1
  3268  0656                     u705:	
  3269  0656  1003               	clrc
  3270  0657  0DA2               	rlf	___wmul@multiplicand,f
  3271  0658  0DA3               	rlf	___wmul@multiplicand+1,f
  3272  0659  3EFF               	addlw	-1
  3273  065A  1D03               	skipz
  3274  065B  2E56               	goto	u705
  3275  065C  3001               	movlw	1
  3276  065D                     u715:	
  3277  065D  1003               	clrc
  3278  065E  0CA1               	rrf	___wmul@multiplier+1,f
  3279  065F  0CA0               	rrf	___wmul@multiplier,f
  3280  0660  3EFF               	addlw	-1
  3281  0661  1D03               	skipz
  3282  0662  2E5D               	goto	u715
  3283  0663  0820               	movf	___wmul@multiplier,w
  3284  0664  0421               	iorwf	___wmul@multiplier+1,w
  3285  0665  1D03               	btfss	3,2
  3286  0666  2E4D               	goto	l1286
  3287  0667  0825               	movf	___wmul@product+1,w
  3288  0668  00A1               	movwf	?___wmul+1
  3289  0669  0824               	movf	___wmul@product,w
  3290  066A  00A0               	movwf	?___wmul
  3291  066B  0008               	return
  3292  066C                     __end_of___wmul:	
  3293                           
  3294                           	psect	text15
  3295  06C2                     __ptext15:	
  3296 ;; *************** function _CommandChannel *****************
  3297 ;; Defined at:
  3298 ;;		line 190 in file "main.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  d               4    5[BANK0 ] unsigned long 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      void 
  3305 ;; Registers used:
  3306 ;;		wreg, status,2, status,0, pclath, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3312 ;;      Params:         0       4       0       0
  3313 ;;      Locals:         0       0       0       0
  3314 ;;      Temps:          0       0       0       0
  3315 ;;      Totals:         0       4       0       0
  3316 ;;Total ram usage:        4 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    5
  3319 ;; This function calls:
  3320 ;;		_delay_ms
  3321 ;; This function is called by:
  3322 ;;		_CmdMultiChannel
  3323 ;;		_processCmdIN
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           
  3328                           ;psect for function _CommandChannel
  3329  06C2                     _CommandChannel:	
  3330                           
  3331                           ;main.c: 192: RC3 = 0;
  3332                           
  3333                           ;incstack = 0
  3334                           ; Regs used in _CommandChannel: [wreg+status,2+status,0+pclath+cstack]
  3335  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  3336  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  3337  06C4  1187               	bcf	7,3	;volatile
  3338                           
  3339                           ;main.c: 193: delay_ms(d);
  3340  06C5  0826               	movf	CommandChannel@d+1,w
  3341  06C6  00A1               	movwf	delay_ms@x+1
  3342  06C7  0825               	movf	CommandChannel@d,w
  3343  06C8  00A0               	movwf	delay_ms@x
  3344  06C9  118A  266C  118A   	fcall	_delay_ms
  3345                           
  3346                           ;main.c: 194: RC3 = 1;
  3347  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  3348  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  3349  06CE  1587               	bsf	7,3	;volatile
  3350                           
  3351                           ;main.c: 195: delay_ms(d);
  3352  06CF  0826               	movf	CommandChannel@d+1,w
  3353  06D0  00A1               	movwf	delay_ms@x+1
  3354  06D1  0825               	movf	CommandChannel@d,w
  3355  06D2  00A0               	movwf	delay_ms@x
  3356  06D3  118A  266C         	fcall	_delay_ms
  3357  06D5  0008               	return
  3358  06D6                     __end_of_CommandChannel:	
  3359                           
  3360                           	psect	text16
  3361  066C                     __ptext16:	
  3362 ;; *************** function _delay_ms *****************
  3363 ;; Defined at:
  3364 ;;		line 161 in file "main.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  x               2    0[BANK0 ] int 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  i               2    3[BANK0 ] int 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3378 ;;      Params:         0       2       0       0
  3379 ;;      Locals:         0       2       0       0
  3380 ;;      Temps:          0       1       0       0
  3381 ;;      Totals:         0       5       0       0
  3382 ;;Total ram usage:        5 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    4
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_CommandChannel
  3389 ;;		_CmdMultiChannel
  3390 ;;		_processCmdIN
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           
  3395                           ;psect for function _delay_ms
  3396  066C                     _delay_ms:	
  3397                           
  3398                           ;main.c: 164: for (int i = 0; i < x; i++)
  3399                           
  3400                           ;incstack = 0
  3401                           ; Regs used in _delay_ms: [wreg+status,2]
  3402  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3403  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3404  066E  01A3               	clrf	delay_ms@i
  3405  066F  01A4               	clrf	delay_ms@i+1
  3406  0670                     l110:	
  3407  0670  0824               	movf	delay_ms@i+1,w
  3408  0671  3A80               	xorlw	128
  3409  0672  00A2               	movwf	??_delay_ms
  3410  0673  0821               	movf	delay_ms@x+1,w
  3411  0674  3A80               	xorlw	128
  3412  0675  0222               	subwf	??_delay_ms,w
  3413  0676  1D03               	skipz
  3414  0677  2E7A               	goto	u675
  3415  0678  0820               	movf	delay_ms@x,w
  3416  0679  0223               	subwf	delay_ms@i,w
  3417  067A                     u675:	
  3418  067A  1803               	btfsc	3,0
  3419  067B  0008               	return
  3420                           
  3421                           ;main.c: 165: {
  3422                           ;main.c: 166: _delay((unsigned long)((1)*(4000000/4000.0)));
  3423  067C  30C7               	movlw	199
  3424  067D  1283               	bcf	3,5	;RP0=0, select bank0
  3425  067E  1303               	bcf	3,6	;RP1=0, select bank0
  3426  067F  00A2               	movwf	??_delay_ms
  3427  0680                     u1347:	
  3428  0680  2E81               	nop2
  3429  0681  0BA2               	decfsz	??_delay_ms,f
  3430  0682  2E80               	goto	u1347
  3431  0683  2E84               	nop2
  3432  0684  0000               	nop
  3433  0685  3001               	movlw	1
  3434  0686  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0687  1303               	bcf	3,6	;RP1=0, select bank0
  3436  0688  07A3               	addwf	delay_ms@i,f
  3437  0689  1803               	skipnc
  3438  068A  0AA4               	incf	delay_ms@i+1,f
  3439  068B  3000               	movlw	0
  3440  068C  07A4               	addwf	delay_ms@i+1,f
  3441  068D  2E70               	goto	l110
  3442  068E                     __end_of_delay_ms:	
  3443                           
  3444                           	psect	text17
  3445  0707                     __ptext17:	
  3446 ;; *************** function _flashAliveLED *****************
  3447 ;; Defined at:
  3448 ;;		line 175 in file "main.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  toggleCount     2    0[BANK0 ] int 
  3451 ;;  changeScaler    2    2[BANK0 ] int 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3463 ;;      Params:         0       4       0       0
  3464 ;;      Locals:         0       0       0       0
  3465 ;;      Temps:          0       0       0       0
  3466 ;;      Totals:         0       4       0       0
  3467 ;;Total ram usage:        4 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    4
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_main
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           
  3478                           ;psect for function _flashAliveLED
  3479  0707                     _flashAliveLED:	
  3480                           
  3481                           ;main.c: 177: tCount = toggleCount;
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _flashAliveLED: [wreg]
  3485  0707  1283               	bcf	3,5	;RP0=0, select bank0
  3486  0708  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0709  0821               	movf	flashAliveLED@toggleCount+1,w
  3488  070A  00E6               	movwf	_tCount+1
  3489  070B  0820               	movf	flashAliveLED@toggleCount,w
  3490  070C  00E5               	movwf	_tCount
  3491                           
  3492                           ;main.c: 178: scaler = changeScaler;
  3493  070D  0823               	movf	flashAliveLED@changeScaler+1,w
  3494  070E  00E4               	movwf	_scaler+1
  3495  070F  0822               	movf	flashAliveLED@changeScaler,w
  3496  0710  00E3               	movwf	_scaler
  3497                           
  3498                           ;main.c: 179: INTCONbits.T0IE = 1;
  3499  0711  168B               	bsf	11,5	;volatile
  3500  0712  0008               	return
  3501  0713                     __end_of_flashAliveLED:	
  3502                           
  3503                           	psect	text18
  3504  0389                     __ptext18:	
  3505 ;; *************** function _ISR *****************
  3506 ;; Defined at:
  3507 ;;		line 532 in file "main.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;		None
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  c               1   13[COMMON] unsigned char 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3521 ;;      Params:         0       0       0       0
  3522 ;;      Locals:         1       0       0       0
  3523 ;;      Temps:          5       0       0       0
  3524 ;;      Totals:         6       0       0       0
  3525 ;;Total ram usage:        6 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    3
  3528 ;; This function calls:
  3529 ;;		_getch
  3530 ;;		_processRXIN
  3531 ;; This function is called by:
  3532 ;;		Interrupt level 1
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function _ISR
  3538  0389                     _ISR:	
  3539                           
  3540                           ;main.c: 534: if(PIE1bits.RCIE && PIR1bits.RCIF){
  3541  0389  1683               	bsf	3,5	;RP0=1, select bank1
  3542  038A  1303               	bcf	3,6	;RP1=0, select bank1
  3543  038B  1E8C               	btfss	12,5	;volatile
  3544  038C  2BB1               	goto	i1l227
  3545  038D  1283               	bcf	3,5	;RP0=0, select bank0
  3546  038E  1303               	bcf	3,6	;RP1=0, select bank0
  3547  038F  1E8C               	btfss	12,5	;volatile
  3548  0390  2BB1               	goto	i1l227
  3549                           
  3550                           ;main.c: 535: UBYTE c;
  3551                           ;main.c: 537: c = getch ();
  3552  0391  118A  2756  118A   	fcall	_getch
  3553  0394  00F8               	movwf	??_ISR
  3554  0395  0878               	movf	??_ISR,w
  3555  0396  00FD               	movwf	ISR@c
  3556                           
  3557                           ;main.c: 538: if (c!=0)
  3558  0397  087D               	movf	ISR@c,w
  3559  0398  1903               	btfsc	3,2
  3560  0399  2B9E               	goto	i1l1694
  3561                           
  3562                           ;main.c: 539: processRXIN(c);
  3563  039A  087D               	movf	ISR@c,w
  3564  039B  118A  2461  118A   	fcall	_processRXIN
  3565  039E                     i1l1694:	
  3566                           
  3567                           ;main.c: 541: if(RCSTAbits.FERR){
  3568  039E  1283               	bcf	3,5	;RP0=0, select bank0
  3569  039F  1303               	bcf	3,6	;RP1=0, select bank0
  3570  03A0  1D17               	btfss	23,2	;volatile
  3571  03A1  2BA8               	goto	i1l1702
  3572                           
  3573                           ;main.c: 542: flagRXFramingError = 1;
  3574  03A2  3001               	movlw	1
  3575  03A3  00D9               	movwf	_flagRXFramingError
  3576  03A4  3000               	movlw	0
  3577  03A5  00DA               	movwf	_flagRXFramingError+1
  3578                           
  3579                           ;main.c: 543: SPEN = 0;
  3580  03A6  1397               	bcf	23,7	;volatile
  3581                           
  3582                           ;main.c: 544: SPEN = 1;
  3583  03A7  1797               	bsf	23,7	;volatile
  3584  03A8                     i1l1702:	
  3585                           
  3586                           ;main.c: 546: }
  3587                           ;main.c: 547: if(RCSTAbits.OERR){
  3588  03A8  1C97               	btfss	23,1	;volatile
  3589  03A9  2BEB               	goto	i1l238
  3590                           
  3591                           ;main.c: 548: flagRXOverrunError = 1;
  3592  03AA  3001               	movlw	1
  3593  03AB  00D7               	movwf	_flagRXOverrunError
  3594  03AC  3000               	movlw	0
  3595  03AD  00D8               	movwf	_flagRXOverrunError+1
  3596                           
  3597                           ;main.c: 549: CREN = 0;
  3598  03AE  1217               	bcf	23,4	;volatile
  3599                           
  3600                           ;main.c: 550: CREN = 1;
  3601  03AF  1617               	bsf	23,4	;volatile
  3602                           
  3603                           ;main.c: 551: }
  3604                           ;main.c: 553: }
  3605  03B0  2BEB               	goto	i1l238
  3606  03B1                     i1l227:	
  3607                           
  3608                           ;main.c: 564: else if(INTCONbits.T0IF && INTCONbits.T0IE)
  3609  03B1  190B               	btfsc	11,2	;volatile
  3610  03B2  1E8B               	btfss	11,5	;volatile
  3611  03B3  2BEB               	goto	i1l238
  3612                           
  3613                           ;main.c: 565: {
  3614                           ;main.c: 566: TMR0 -= 250;
  3615  03B4  30FA               	movlw	250
  3616  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  3617  03B6  0281               	subwf	1,f	;volatile
  3618                           
  3619                           ;main.c: 567: INTCONbits.T0IF = 0;
  3620  03B7  110B               	bcf	11,2	;volatile
  3621                           
  3622                           ;main.c: 568: if (scaleCount > 0 ) scaleCount --;
  3623  03B8  0862               	movf	_scaleCount+1,w
  3624  03B9  3A80               	xorlw	128
  3625  03BA  00FF               	movwf	127
  3626  03BB  3080               	movlw	128
  3627  03BC  027F               	subwf	127,w
  3628  03BD  1D03               	skipz
  3629  03BE  2BC1               	goto	u126_25
  3630  03BF  3001               	movlw	1
  3631  03C0  0261               	subwf	_scaleCount,w
  3632  03C1                     u126_25:	
  3633  03C1  1C03               	skipc
  3634  03C2  2BCC               	goto	i1l1720
  3635  03C3  30FF               	movlw	255
  3636  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  3637  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  3638  03C6  07E1               	addwf	_scaleCount,f
  3639  03C7  1803               	skipnc
  3640  03C8  0AE2               	incf	_scaleCount+1,f
  3641  03C9  30FF               	movlw	255
  3642  03CA  07E2               	addwf	_scaleCount+1,f
  3643  03CB  2BEB               	goto	i1l238
  3644  03CC                     i1l1720:	
  3645                           
  3646                           ;main.c: 569: else
  3647                           ;main.c: 570: {
  3648                           ;main.c: 571: scaleCount = scaler;
  3649  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  3650  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  3651  03CE  0864               	movf	_scaler+1,w
  3652  03CF  00E2               	movwf	_scaleCount+1
  3653  03D0  0863               	movf	_scaler,w
  3654  03D1  00E1               	movwf	_scaleCount
  3655                           
  3656                           ;main.c: 572: RA4 = !RA4;
  3657  03D2  3010               	movlw	16
  3658  03D3  0685               	xorwf	5,f
  3659                           
  3660                           ;main.c: 573: if (RA4 == 1)
  3661  03D4  1E05               	btfss	5,4	;volatile
  3662  03D5  2BEB               	goto	i1l238
  3663                           
  3664                           ;main.c: 574: {
  3665                           ;main.c: 575: if (tCount > 0) tCount --;
  3666  03D6  0866               	movf	_tCount+1,w
  3667  03D7  3A80               	xorlw	128
  3668  03D8  00FF               	movwf	127
  3669  03D9  3080               	movlw	128
  3670  03DA  027F               	subwf	127,w
  3671  03DB  1D03               	skipz
  3672  03DC  2BDF               	goto	u128_25
  3673  03DD  3001               	movlw	1
  3674  03DE  0265               	subwf	_tCount,w
  3675  03DF                     u128_25:	
  3676  03DF  1C03               	skipc
  3677  03E0  2BEA               	goto	i1l236
  3678  03E1  30FF               	movlw	255
  3679  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  3680  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  3681  03E4  07E5               	addwf	_tCount,f
  3682  03E5  1803               	skipnc
  3683  03E6  0AE6               	incf	_tCount+1,f
  3684  03E7  30FF               	movlw	255
  3685  03E8  07E6               	addwf	_tCount+1,f
  3686  03E9  2BEB               	goto	i1l238
  3687  03EA                     i1l236:	
  3688                           
  3689                           ;main.c: 576: else INTCONbits.T0IE = 0;
  3690  03EA  128B               	bcf	11,5	;volatile
  3691  03EB                     i1l238:	
  3692  03EB  087C               	movf	??_ISR+4,w
  3693  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3694  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3695  03EE  00FF               	movwf	127
  3696  03EF  087B               	movf	??_ISR+3,w
  3697  03F0  008A               	movwf	10
  3698  03F1  087A               	movf	??_ISR+2,w
  3699  03F2  0084               	movwf	4
  3700  03F3  0E79               	swapf	(??_ISR+1)^(0+-128),w
  3701  03F4  0083               	movwf	3
  3702  03F5  0EFE               	swapf	126,f
  3703  03F6  0E7E               	swapf	126,w
  3704  03F7  0009               	retfie
  3705  03F8                     __end_of_ISR:	
  3706                           
  3707                           	psect	intentry
  3708  0004                     __pintentry:	
  3709                           ;incstack = 0
  3710                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3711                           
  3712  0004                     interrupt_function:	
  3713  007E                     saved_w	set	btemp
  3714  0004  00FE               	movwf	btemp
  3715  0005  0E03               	swapf	3,w
  3716  0006  00F9               	movwf	??_ISR+1
  3717  0007  0804               	movf	4,w
  3718  0008  00FA               	movwf	??_ISR+2
  3719  0009  080A               	movf	10,w
  3720  000A  00FB               	movwf	??_ISR+3
  3721  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3722  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3723  000D  087F               	movf	btemp+1,w
  3724  000E  00FC               	movwf	??_ISR+4
  3725  000F  118A  2B89         	ljmp	_ISR
  3726                           
  3727                           	psect	text19
  3728  0461                     __ptext19:	
  3729 ;; *************** function _processRXIN *****************
  3730 ;; Defined at:
  3731 ;;		line 467 in file "main.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  c_in            1    wreg     volatile unsigned char 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  c_in            1    7[COMMON] volatile unsigned char 
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3745 ;;      Params:         0       0       0       0
  3746 ;;      Locals:         1       0       0       0
  3747 ;;      Temps:          2       0       0       0
  3748 ;;      Totals:         3       0       0       0
  3749 ;;Total ram usage:        3 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    2
  3752 ;; This function calls:
  3753 ;;		i1_flashAliveLED
  3754 ;;		i1_printci_tx
  3755 ;; This function is called by:
  3756 ;;		_ISR
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           
  3761                           ;psect for function _processRXIN
  3762  0461                     _processRXIN:	
  3763                           
  3764                           ;incstack = 0
  3765                           ; Regs used in _processRXIN: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3766                           ;processRXIN@c_in stored from wreg
  3767  0461  00F7               	movwf	processRXIN@c_in	;volatile
  3768                           
  3769                           ;main.c: 469: switch (c_in)
  3770  0462  2C9F               	goto	i1l1666
  3771  0463                     i1l1634:	
  3772                           ;main.c: 470: {
  3773                           ;main.c: 472: case 0x02 :
  3774                           
  3775                           
  3776                           ;main.c: 473: {
  3777                           ;main.c: 474: NewTs232Frame = MSG_START;
  3778  0463  3002               	movlw	2
  3779  0464  00F5               	movwf	??_processRXIN
  3780  0465  0875               	movf	??_processRXIN,w
  3781  0466  1283               	bcf	3,5	;RP0=0, select bank0
  3782  0467  1303               	bcf	3,6	;RP1=0, select bank0
  3783  0468  00E9               	movwf	_NewTs232Frame
  3784                           
  3785                           ;main.c: 475: LenRs232 = 0;
  3786  0469  01E0               	clrf	_LenRs232
  3787                           
  3788                           ;main.c: 476: break;
  3789  046A  2CA7               	goto	i1l1668
  3790  046B                     i1l1638:	
  3791                           ;main.c: 477: }
  3792                           ;main.c: 479: case 0x03 :
  3793                           
  3794                           
  3795                           ;main.c: 480: {
  3796                           ;main.c: 481: if (NewTs232Frame == MSG_ACQUIRE)
  3797  046B  3003               	movlw	3
  3798  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3799  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3800  046E  0669               	xorwf	_NewTs232Frame,w
  3801  046F  1D03               	btfss	3,2
  3802  0470  2C73               	goto	i1l1642
  3803                           
  3804                           ;main.c: 482: NewTs232Frame = MSG_COMPLETE;
  3805  0471  3004               	movlw	4
  3806  0472  2C91               	goto	L9
  3807  0473                     i1l1642:	
  3808                           
  3809                           ;main.c: 483: else
  3810                           ;main.c: 484: {
  3811                           ;main.c: 485: NewTs232Frame = MSG_ERROR;
  3812  0473  01E9               	clrf	_NewTs232Frame
  3813                           
  3814                           ;main.c: 486: Err_Code = ERR_FRAME_TOO_SMALL;
  3815  0474  3002               	movlw	2
  3816  0475  2C9B               	goto	L10
  3817  0476                     i1l1646:	
  3818                           ;main.c: 489: }
  3819                           ;main.c: 491: default :
  3820                           
  3821                           ;main.c: 487: }
  3822                           ;main.c: 488: break;
  3823                           
  3824                           
  3825                           ;main.c: 492: {
  3826                           ;main.c: 493: if (NewTs232Frame == MSG_START ||
  3827                           ;main.c: 494: NewTs232Frame == MSG_ACQUIRE)
  3828  0476  3002               	movlw	2
  3829  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3831  0479  0669               	xorwf	_NewTs232Frame,w
  3832  047A  1903               	btfsc	3,2
  3833  047B  2C80               	goto	i1l1650
  3834  047C  3003               	movlw	3
  3835  047D  0669               	xorwf	_NewTs232Frame,w
  3836  047E  1D03               	btfss	3,2
  3837  047F  2CA7               	goto	i1l1668
  3838  0480                     i1l1650:	
  3839                           
  3840                           ;main.c: 495: {
  3841                           ;main.c: 496: if (LenRs232 < (2 + 1 + 4))
  3842  0480  3007               	movlw	7
  3843  0481  0260               	subwf	_LenRs232,w
  3844  0482  1803               	skipnc
  3845  0483  2C95               	goto	i1l1658
  3846                           
  3847                           ;main.c: 497: {
  3848                           ;main.c: 499: Rs232Frame[LenRs232] = c_in;
  3849  0484  0877               	movf	processRXIN@c_in,w	;volatile
  3850  0485  00F5               	movwf	??_processRXIN
  3851  0486  0860               	movf	_LenRs232,w
  3852  0487  3E50               	addlw	(low (_Rs232Frame| 0))& (0+255)
  3853  0488  0084               	movwf	4
  3854  0489  0875               	movf	??_processRXIN,w
  3855  048A  1383               	bcf	3,7	;select IRP bank0
  3856  048B  0080               	movwf	0
  3857                           
  3858                           ;main.c: 500: LenRs232 ++;
  3859  048C  3001               	movlw	1
  3860  048D  00F5               	movwf	??_processRXIN
  3861  048E  0875               	movf	??_processRXIN,w
  3862  048F  07E0               	addwf	_LenRs232,f
  3863                           
  3864                           ;main.c: 501: NewTs232Frame = MSG_ACQUIRE;
  3865  0490  3003               	movlw	3
  3866  0491                     L9:	
  3867  0491  00F5               	movwf	??_processRXIN
  3868  0492  0875               	movf	??_processRXIN,w
  3869  0493  00E9               	movwf	_NewTs232Frame
  3870                           
  3871                           ;main.c: 502: }
  3872  0494  2CA7               	goto	i1l1668
  3873  0495                     i1l1658:	
  3874                           
  3875                           ;main.c: 503: else if (LenRs232 >= (2 + 1 + 4))
  3876  0495  3007               	movlw	7
  3877  0496  0260               	subwf	_LenRs232,w
  3878  0497  1C03               	skipc
  3879  0498  2CA7               	goto	i1l1668
  3880                           
  3881                           ;main.c: 504: {
  3882                           ;main.c: 506: NewTs232Frame = MSG_ERROR;
  3883  0499  01E9               	clrf	_NewTs232Frame
  3884                           
  3885                           ;main.c: 507: Err_Code = ERR_FRAME_TOO_LONG;
  3886  049A  3003               	movlw	3
  3887  049B                     L10:	
  3888  049B  00F5               	movwf	??_processRXIN
  3889  049C  0875               	movf	??_processRXIN,w
  3890  049D  00E8               	movwf	_Err_Code
  3891                           
  3892                           ;main.c: 511: }
  3893                           ;main.c: 512: }
  3894                           
  3895                           ;main.c: 508: }
  3896                           ;main.c: 509: }
  3897                           ;main.c: 510: break;
  3898  049E  2CA7               	goto	i1l1668
  3899  049F                     i1l1666:	
  3900  049F  0877               	movf	processRXIN@c_in,w	;volatile
  3901                           
  3902                           ; Switch size 1, requested type "space"
  3903                           ; Number of cases is 2, Range of values is 2 to 3
  3904                           ; switch strategies available:
  3905                           ; Name         Instructions Cycles
  3906                           ; simple_byte            7     4 (average)
  3907                           ; direct_byte           14    10 (fixed)
  3908                           ; jumptable            263     9 (fixed)
  3909                           ;	Chosen strategy is simple_byte
  3910  04A0  3A02               	xorlw	2	; case 2
  3911  04A1  1903               	skipnz
  3912  04A2  2C63               	goto	i1l1634
  3913  04A3  3A01               	xorlw	1	; case 3
  3914  04A4  1903               	skipnz
  3915  04A5  2C6B               	goto	i1l1638
  3916  04A6  2C76               	goto	i1l1646
  3917  04A7                     i1l1668:	
  3918                           
  3919                           ;main.c: 519: if (NewTs232Frame == MSG_ERROR)
  3920  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  3921  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  3922  04A9  0869               	movf	_NewTs232Frame,w
  3923  04AA  1D03               	btfss	3,2
  3924  04AB  0008               	return
  3925                           
  3926                           ;main.c: 520: {
  3927                           ;main.c: 521: if (LenRs232 > 0)
  3928  04AC  0860               	movf	_LenRs232,w
  3929  04AD  1903               	btfsc	3,2
  3930  04AE  2CBA               	goto	i1l1674
  3931                           
  3932                           ;main.c: 522: printci_tx('e', Err_Code);
  3933  04AF  0868               	movf	_Err_Code,w
  3934  04B0  00F5               	movwf	??_processRXIN
  3935  04B1  01F6               	clrf	??_processRXIN+1
  3936  04B2  0875               	movf	??_processRXIN,w
  3937  04B3  00F2               	movwf	i1printci_tx@i
  3938  04B4  0876               	movf	??_processRXIN+1,w
  3939  04B5  00F3               	movwf	i1printci_tx@i+1
  3940  04B6  3065               	movlw	101
  3941  04B7  118A  26AB  118A   	fcall	i1_printci_tx
  3942  04BA                     i1l1674:	
  3943                           
  3944                           ;main.c: 523: NewTs232Frame = MSG_ANY;
  3945  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  3946  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  3947  04BC  01E9               	clrf	_NewTs232Frame
  3948  04BD  0AE9               	incf	_NewTs232Frame,f
  3949                           
  3950                           ;main.c: 524: flashAliveLED(5, 2);
  3951  04BE  3005               	movlw	5
  3952  04BF  00F0               	movwf	i1flashAliveLED@toggleCount
  3953  04C0  3000               	movlw	0
  3954  04C1  00F1               	movwf	i1flashAliveLED@toggleCount+1
  3955  04C2  3002               	movlw	2
  3956  04C3  00F2               	movwf	i1flashAliveLED@changeScaler
  3957  04C4  3000               	movlw	0
  3958  04C5  00F3               	movwf	i1flashAliveLED@changeScaler+1
  3959  04C6  118A  2713         	fcall	i1_flashAliveLED
  3960  04C8  0008               	return
  3961  04C9                     __end_of_processRXIN:	
  3962                           ;main.c: 525: }
  3963                           ;main.c: 529: return;
  3964                           
  3965                           
  3966                           	psect	text20
  3967  06AB                     __ptext20:	
  3968 ;; *************** function i1_printci_tx *****************
  3969 ;; Defined at:
  3970 ;;		line 32 in file "usart.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  c               1    wreg     const unsigned char 
  3973 ;;  i               2    2[COMMON] unsigned int 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  c               1    4[COMMON] const unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0, pclath, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3985 ;;      Params:         2       0       0       0
  3986 ;;      Locals:         1       0       0       0
  3987 ;;      Temps:          0       0       0       0
  3988 ;;      Totals:         3       0       0       0
  3989 ;;Total ram usage:        3 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    1
  3992 ;; This function calls:
  3993 ;;		i1_itoc
  3994 ;;		i1_putch
  3995 ;; This function is called by:
  3996 ;;		_processRXIN
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           
  4001                           ;psect for function i1_printci_tx
  4002  06AB                     i1_printci_tx:	
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in i1_printci_tx: [wreg+status,2+status,0+pclath+cstack]
  4006                           ;i1printci_tx@c stored from wreg
  4007  06AB  00F4               	movwf	i1printci_tx@c
  4008                           
  4009                           ;usart.c: 34: putch(0x02);
  4010  06AC  3002               	movlw	2
  4011  06AD  118A  274E  118A   	fcall	i1_putch
  4012                           
  4013                           ;usart.c: 35: putch(c);
  4014  06B0  0874               	movf	i1printci_tx@c,w
  4015  06B1  118A  274E  118A   	fcall	i1_putch
  4016                           
  4017                           ;usart.c: 36: putch(itoc(i));
  4018  06B4  0873               	movf	i1printci_tx@i+1,w
  4019  06B5  00F1               	movwf	i1itoc@i+1
  4020  06B6  0872               	movf	i1printci_tx@i,w
  4021  06B7  00F0               	movwf	i1itoc@i
  4022  06B8  118A  2761  118A   	fcall	i1_itoc
  4023  06BB  118A  274E  118A   	fcall	i1_putch
  4024                           
  4025                           ;usart.c: 37: putch(0x03);
  4026  06BE  3003               	movlw	3
  4027  06BF  118A  274E         	fcall	i1_putch
  4028  06C1  0008               	return
  4029  06C2                     __end_ofi1_printci_tx:	
  4030                           
  4031                           	psect	text21
  4032  074E                     __ptext21:	
  4033 ;; *************** function i1_putch *****************
  4034 ;; Defined at:
  4035 ;;		line 10 in file "usart.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  byte            1    wreg     unsigned char 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  byte            1    0[COMMON] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      void 
  4042 ;; Registers used:
  4043 ;;		wreg
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4049 ;;      Params:         0       0       0       0
  4050 ;;      Locals:         1       0       0       0
  4051 ;;      Temps:          0       0       0       0
  4052 ;;      Totals:         1       0       0       0
  4053 ;;Total ram usage:        1 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		i1_printci_tx
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           
  4063                           ;psect for function i1_putch
  4064  074E                     i1_putch:	
  4065                           
  4066                           ;incstack = 0
  4067                           ; Regs used in i1_putch: [wreg]
  4068                           ;i1putch@byte stored from wreg
  4069  074E  00F0               	movwf	i1putch@byte
  4070  074F                     i1l262:	
  4071                           ;usart.c: 13: continue;
  4072                           
  4073                           ;usart.c: 12: while(!TXIF)
  4074                           
  4075  074F  1283               	bcf	3,5	;RP0=0, select bank0
  4076  0750  1303               	bcf	3,6	;RP1=0, select bank0
  4077  0751  1C8C               	btfss	12,1	;volatile
  4078  0752  2F4F               	goto	i1l262
  4079                           
  4080                           ;usart.c: 14: TXREG = byte;
  4081  0753  0870               	movf	i1putch@byte,w
  4082  0754  0095               	movwf	21	;volatile
  4083  0755  0008               	return
  4084  0756                     __end_ofi1_putch:	
  4085                           
  4086                           	psect	text22
  4087  0761                     __ptext22:	
  4088 ;; *************** function i1_itoc *****************
  4089 ;; Defined at:
  4090 ;;		line 5 in file "usart.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  i               2    0[COMMON] int 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      unsigned char 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4104 ;;      Params:         2       0       0       0
  4105 ;;      Locals:         0       0       0       0
  4106 ;;      Temps:          0       0       0       0
  4107 ;;      Totals:         2       0       0       0
  4108 ;;Total ram usage:        2 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		i1_printci_tx
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           
  4118                           ;psect for function i1_itoc
  4119  0761                     i1_itoc:	
  4120                           
  4121                           ;usart.c: 7: return i + '0';
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in i1_itoc: [wreg+status,2+status,0]
  4125  0761  0870               	movf	i1itoc@i,w
  4126  0762  3E30               	addlw	48
  4127  0763  0008               	return
  4128  0764                     __end_ofi1_itoc:	
  4129                           
  4130                           	psect	text23
  4131  0713                     __ptext23:	
  4132 ;; *************** function i1_flashAliveLED *****************
  4133 ;; Defined at:
  4134 ;;		line 175 in file "main.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  toggleCount     2    0[COMMON] int 
  4137 ;;  changeScaler    2    2[COMMON] int 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4149 ;;      Params:         4       0       0       0
  4150 ;;      Locals:         0       0       0       0
  4151 ;;      Temps:          0       0       0       0
  4152 ;;      Totals:         4       0       0       0
  4153 ;;Total ram usage:        4 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_processRXIN
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function i1_flashAliveLED
  4164  0713                     i1_flashAliveLED:	
  4165                           
  4166                           ;main.c: 177: tCount = toggleCount;
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in i1_flashAliveLED: [wreg]
  4170  0713  0871               	movf	i1flashAliveLED@toggleCount+1,w
  4171  0714  1283               	bcf	3,5	;RP0=0, select bank0
  4172  0715  1303               	bcf	3,6	;RP1=0, select bank0
  4173  0716  00E6               	movwf	_tCount+1
  4174  0717  0870               	movf	i1flashAliveLED@toggleCount,w
  4175  0718  00E5               	movwf	_tCount
  4176                           
  4177                           ;main.c: 178: scaler = changeScaler;
  4178  0719  0873               	movf	i1flashAliveLED@changeScaler+1,w
  4179  071A  00E4               	movwf	_scaler+1
  4180  071B  0872               	movf	i1flashAliveLED@changeScaler,w
  4181  071C  00E3               	movwf	_scaler
  4182                           
  4183                           ;main.c: 179: INTCONbits.T0IE = 1;
  4184  071D  168B               	bsf	11,5	;volatile
  4185  071E  0008               	return
  4186  071F                     __end_ofi1_flashAliveLED:	
  4187                           
  4188                           	psect	text24
  4189  0756                     __ptext24:	
  4190 ;; *************** function _getch *****************
  4191 ;; Defined at:
  4192 ;;		line 40 in file "usart.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      unsigned char 
  4199 ;; Registers used:
  4200 ;;		wreg
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4206 ;;      Params:         0       0       0       0
  4207 ;;      Locals:         0       0       0       0
  4208 ;;      Temps:          0       0       0       0
  4209 ;;      Totals:         0       0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_ISR
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _getch
  4221  0756                     _getch:	
  4222  0756                     i1l280:	
  4223                           ;usart.c: 43: continue;
  4224                           
  4225                           ;usart.c: 42: while(!RCIF)
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _getch: [wreg]
  4229                           
  4230  0756  1283               	bcf	3,5	;RP0=0, select bank0
  4231  0757  1303               	bcf	3,6	;RP1=0, select bank0
  4232  0758  1E8C               	btfss	12,5	;volatile
  4233  0759  2F56               	goto	i1l280
  4234                           
  4235                           ;usart.c: 44: return RCREG;
  4236  075A  0814               	movf	20,w	;volatile
  4237  075B  0008               	return
  4238  075C                     __end_of_getch:	
  4239  007E                     btemp	set	126	;btemp
  4240  007E                     wtemp0	set	126


Data Sizes:
    Strings     90
    Constant    0
    Data        9
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     48      74
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    print_tx@str	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_9(CODE[6]), STR_8(CODE[15]), STR_7(CODE[12]), STR_6(CODE[11]), 
		 -> STR_5(CODE[15]), STR_4(CODE[9]), STR_3(CODE[12]), STR_2(CODE[10]), 
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_processRXIN
    _processRXIN->i1_printci_tx
    i1_printci_tx->i1_itoc

Critical Paths under _main in BANK0

    _main->_processCmdIN
    _processCmdIN->_CmdMultiChannel
    _printc_tx->_putch
    _pow->___wmul
    ___lmul->_pow
    _CmdMultiChannel->_ProcessReadChannel
    _printci_tx->_itoc
    _print_tx->_putch
    _ProcessReadChannel->___wmul
    _CommandChannel->_delay_ms

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4    8693
                                             44 BANK0      4     0      4
                      _fast_delay_ms
                      _flashAliveLED
                           _print_tx
                       _processCmdIN
 ---------------------------------------------------------------------------------
 (1) _processCmdIN                                        12    12      0    7551
                                             32 BANK0     12    12      0
                    _CmdMultiChannel
                     _CommandChannel
                 _ProcessReadChannel
                             ___lmul
                               _ctoi
                           _delay_ms
                      _fast_delay_ms
                            _isdigit
                                _pow
                           _print_tx
                          _printc_tx
                         _printci_tx
 ---------------------------------------------------------------------------------
 (2) _printc_tx                                            1     1      0      44
                                              1 BANK0      1     1      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _pow                                                  9     5      4     590
                                              6 BANK0      9     5      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fast_delay_ms                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ctoi                                                 4     1      3      22
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     198
                                             15 BANK0     13     5      8
                               _ctoi (ARG)
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (2) _CmdMultiChannel                                     14     8      6    3437
                                             18 BANK0     14     8      6
                     _CommandChannel
                 _ProcessReadChannel
                           _delay_ms
                           _print_tx
                         _printci_tx
 ---------------------------------------------------------------------------------
 (2) _printci_tx                                           3     1      2     592
                                              2 BANK0      3     1      2
                               _itoc
                              _putch
 ---------------------------------------------------------------------------------
 (3) _itoc                                                 2     0      2      75
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _print_tx                                             5     3      2     832
                                              1 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ProcessReadChannel                                  12    12      0     304
                                              6 BANK0     12    12      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _CommandChannel                                       4     0      4     620
                                              5 BANK0      4     0      4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     417
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _flashAliveLED                                        4     0      4     310
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  6     6      0     325
                                              8 COMMON     6     6      0
                              _getch
                        _processRXIN
 ---------------------------------------------------------------------------------
 (6) _processRXIN                                          3     3      0     280
                                              5 COMMON     3     3      0
                    i1_flashAliveLED
                       i1_printci_tx
 ---------------------------------------------------------------------------------
 (7) i1_printci_tx                                         3     1      2     140
                                              2 COMMON     3     1      2
                             i1_itoc
                            i1_putch
 ---------------------------------------------------------------------------------
 (8) i1_putch                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_itoc                                               2     0      2      48
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) i1_flashAliveLED                                      4     0      4      96
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fast_delay_ms
   _flashAliveLED
   _print_tx
     _putch
   _processCmdIN
     _CmdMultiChannel
       _CommandChannel
         _delay_ms
       _ProcessReadChannel
         ___wmul
       _delay_ms
       _print_tx
         _putch
       _printci_tx
         _itoc
         _putch
     _CommandChannel
       _delay_ms
     _ProcessReadChannel
       ___wmul
     ___lmul
       _ctoi (ARG)
       _pow (ARG)
         ___wmul
     _ctoi
     _delay_ms
     _fast_delay_ms
     _isdigit
     _pow
       ___wmul
     _print_tx
       _putch
     _printc_tx
       _putch
     _printci_tx
       _itoc
       _putch

 _ISR (ROOT)
   _getch
   _processRXIN
     i1_flashAliveLED
     i1_printci_tx
       i1_itoc
       i1_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       5        0.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     30      4A       3       92.5%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      10        0.0%
ABS                  0      0      58       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 13 21:26:31 2018

 CmdMultiChannel@chanToActive 0032               ??_fast_delay_ms 0020                             pc 0002  
                 __CFG_CP$OFF 0000                 _NewTs232Frame 0069                            fsr 0004  
         ___wmul@multiplicand 0022                           l110 0670                           l200 01F8  
                         l202 0227                           l136 031D                           l243 0508  
                         l262 0749                           l196 019A                    _Rs232Frame 0050  
                         l198 01C9                           l367 0655                           _RA0 0028  
                         _RA1 0029                           _RA2 002A                           _RA3 002B  
                         _RC0 0038                           _RA4 002C                           _RC1 0039  
                         _RA5 002D                           _RC2 003A                           _RC3 003B  
                         _RC4 003C                           _RC5 003D                  __CFG_CPD$OFF 0000  
                         _ISR 0389                           u705 0656                           u715 065D  
                         u805 05D6                           u905 0346                           u675 067A  
                         u765 0631                           u855 02E5                           u865 02ED  
                         u785 059F                           u875 030C                           u795 05B1  
                         u965 0601                           u975 0609          __end_ofi1_printci_tx 06C2  
                         _pow 0590                           fsr0 0004                           indf 0000  
             ??_flashAliveLED 0024                          ?_ISR 0070                          ISR@c 007D  
                        l1304 0451                          l1402 0306                          l1324 062B  
                        l1420 0340                          l1326 0645                          l1422 0365  
                        l1414 033C                          l1350 05B3                          l1408 0327  
                        l1504 0063                          l1450 05FF                          l1530 007D  
                        l1514 0066                          l1380 02AC                          l1356 05D8  
                        l1540 0105                          l1524 00F0                          l1516 006C  
                        l1508 0065                          l1286 064D                          l1374 029B  
                        l1446 05E9                          l1438 0705                          l1622 0237  
                        l1534 00FE                          l1392 02DD                          l1608 0208  
                        l1560 0160                          l1528 00F7                          l1480 0039  
                        l1552 0128                          l1562 0165                          l1626 0242  
                        l1546 0113                          l1554 0151                          l1580 01AA  
                        l1564 016A                          l1628 026D                          l1492 0044  
                        l1476 0038                          l1566 017B                          l1558 0157  
                        l1594 01D9                          l1498 0053                          l1792 0526  
                        ?_pow 0026                          STR_1 0546                          STR_2 0577  
                        STR_3 0560                          STR_4 0581                          STR_5 0545  
                        STR_6 056C                          STR_7 0554                          STR_8 0536  
                        STR_9 058A                          _CREN 00BC                          u1065 0087  
                        u1337 0725                          u1347 0680                          _RCIF 0065  
                        _TMR0 0001                          _SPEN 00BF                          _RXIN 0067  
                        _TXIF 0061                          _main 04C9                          _ctoi 072A  
                        _itoc 075C                          btemp 007E                          pow@a 0026  
                        pow@b 0028                          pow@i 002D                          start 0011  
               __CFG_IESO$OFF 0000               __end_ofi1_putch 0756                 i1printci_tx@c 0074  
               i1printci_tx@i 0072                         ??_ISR 0078                         ??_pow 002A  
               processCmdIN@i 0046                         ?_main 004C                         ?_ctoi 0020  
                       ?_itoc 0020                 __CFG_WDTE$OFF 0000                         _ANSEL 0091  
                       i1l227 03B1                         i1l236 03EA                         i1l262 074F  
                       i1l238 03EB                         i1l280 0756                         _RCREG 0014  
                       _RCSTA 0017                         _SPBRG 0013                         _TRISA 0085  
                       _TRISC 0087                         _TXREG 0015                         _TXSTA 0016  
         ___lmul@multiplicand 0033                __CFG_FCMEN$OFF 0000                         _getch 0756  
             __end_of_isdigit 0707                         _putch 0746                         ctoi@c 0023  
     __end_ofi1_flashAliveLED 071F                __CFG_BOREN$OFF 0000                         itoc@i 0020  
                       pclath 000A                         status 0003                         wtemp0 007E  
              __CFG_MCLRE$OFF 0000               __initialization 0013                  __end_of_main 0530  
                __end_of_ctoi 0735      __size_of_CmdMultiChannel 0116                  __end_of_itoc 0761  
                      ??_main 0050                        ??_ctoi 0023                        ??_itoc 0022  
                      ?_getch 0070                        _ADCON0 001F                        _CMCON0 0019  
                      ?_putch 0070                        i1l1702 03A8                        i1l1720 03CC  
                      i1l1650 0480                        i1l1642 0473                        i1l1634 0463  
                      i1l1646 0476                        i1l1638 046B                        i1l1674 04BA  
                      i1l1658 0495                        i1l1666 049F                        i1l1668 04A7  
                      i1l1694 039E                        u126_25 03C1                        u128_25 03DF  
                      _INTCON 000B                     ??i1_putch 0070      flashAliveLED@toggleCount 0020  
                      i1_itoc 0761       CmdMultiChannel@nbChange 003E              __end_of_delay_ms 068E  
              __CFG_PWRTE$OFF 0000                        ___lmul 05DF                        ___wmul 0649  
             CommandChannel@d 0025                        _tCount 0065         __size_ofi1_printci_tx 0017  
                      _scaler 0063            _flagRXFramingError 0059                     ??_isdigit 0020  
                      saved_w 007E              __end_of_print_tx 0649    i1flashAliveLED@toggleCount 0070  
   flashAliveLED@changeScaler 0022                  ?_processRXIN 0070          processCmdIN@lenDelay 0042  
            ?i1_flashAliveLED 0070   __size_of_ProcessReadChannel 0069       __end_of__initialization 0024  
                i1_printci_tx 06AB          processCmdIN@my_delay 0048                __pcstackCOMMON 0070  
                __pidataBANK0 0735                 __end_of_getch 075C                   i1putch@byte 0070  
               __end_of_putch 074E             ??_CmdMultiChannel 0038              CmdMultiChannel@i 003C  
              _OPTION_REGbits 0081                       ??_getch 0070                       ??_putch 0020  
                  __pbssBANK0 0050               processRXIN@c_in 0077                       ?i1_itoc 0070  
                  __pmaintext 04C9       __size_of_CommandChannel 0014   i1flashAliveLED@changeScaler 0072  
                     ?___lmul 002F                       ?___wmul 0020                    __pintentry 0004  
       __end_of_fast_delay_ms 072A                ___lmul@product 0038            __size_of_printc_tx 0011  
                   ?_delay_ms 0020         __end_of_flashAliveLED 0713                    __stringtab 0530  
                     i1_putch 074E                       i1itoc@i 0070               __size_ofi1_itoc 0003  
                   ?_print_tx 0021               __size_of___lmul 0041               __size_of___wmul 0023  
                     _channel 005D                       __ptext1 0027                       __ptext2 06D6  
                     __ptext3 0590                       __ptext4 06F7                       __ptext5 071F  
                     __ptext6 072A                       __ptext7 05DF                       __ptext8 0273  
                     __ptext9 068E                    _scaleCount 0061                  __size_of_ISR 006F  
                     _isdigit 06F7                  __size_of_pow 004F                    ??_delay_ms 0022  
                     clrloop0 073F          end_of_initialization 0024          __size_of_processRXIN 0068  
           __end_of_printc_tx 06E7                     _RCSTAbits 0017                    ??_print_tx 0023  
               ?_processCmdIN 0070                    _printci_tx 068E                     _DebugMode 005F  
              __end_ofi1_itoc 0764                _CommandChannel 06C2               _CmdMultiChannel 0273  
                 printci_tx@c 0024                   printci_tx@i 0022                   print_tx@len 0021  
                 print_tx@str 0025                __end_of___lmul 0620                __end_of___wmul 066C  
              ??_processCmdIN 0040                   _BAUDCTLbits 0011           start_initialization 0013  
                 __end_of_ISR 03F8                   __end_of_pow 05DF    __end_of_ProcessReadChannel 0461  
                    ??i1_itoc 0072        __end_of_CommandChannel 06D6      __size_ofi1_flashAliveLED 000C  
                    ??___lmul 0037                      ??___wmul 0024                    init_fetch0 06E7  
                 __pdataBANK0 0061                   ?_printci_tx 0022                     ___latbits 0001  
               __pcstackBANK0 0020             __size_of_delay_ms 0022          CmdMultiChannel@delay 0034  
     __end_of_CmdMultiChannel 0389                      ?i1_putch 0070               ?_CommandChannel 0025  
          _flagRXOverrunError 0057             __size_of_print_tx 0029                     __pstrings 0530  
                    ?_isdigit 0070                __size_of_getch 0006                __size_of_putch 0008  
        __end_of_processCmdIN 0273        __size_of_fast_delay_ms 000B             interrupt_function 0004  
              ___wmul@product 0024                     delay_ms@i 0023                     delay_ms@x 0020  
                   clear_ram0 073E                      _PIE1bits 008C           __size_of_printci_tx 001D  
                    _PIR1bits 000C             _lastActiveChannel 005B                     _printc_tx 06D6  
      __size_of_flashAliveLED 000C             ??i1_flashAliveLED 0074                   __stringbase 0535  
           ___wmul@multiplier 0020                    printc_tx@c 0021                      _LenRs232 0060  
               ??_processRXIN 0075             ___lmul@multiplier 002F                      _Err_Code 0068  
            ?_CmdMultiChannel 0032              __size_ofi1_putch 0008                 ?i1_printci_tx 0072  
                  ?_printc_tx 0070                 _fast_delay_ms 071F            __end_of__stringtab 0536  
                 _isdigit$573 0020              __size_of_isdigit 0010                      _delay_ms 066C  
                    __ptext10 075C                      __ptext11 0620                      __ptext20 06AB  
                    __ptext12 0746                      __ptext21 074E                      __ptext13 03F8  
                    __ptext22 0761                      __ptext14 0649                      __ptext23 0713  
                    __ptext15 06C2                      __ptext24 0756                      __ptext16 066C  
                    __ptext17 0707                      __ptext18 0389                      __ptext19 0461  
               _flashAliveLED 0707                 __size_of_main 0067                 __size_of_ctoi 000B  
               __size_of_itoc 0005                     pow@result 002B                ??i1_printci_tx 0074  
         __end_of_processRXIN 04C9            _ProcessReadChannel 03F8                      _print_tx 0620  
         ?_ProcessReadChannel 0070                ?_fast_delay_ms 0070                      main@argc 004C  
                    main@argv 004E                     print_tx@i 0023                  ??_printci_tx 0024  
                   putch@byte 0020                    _INTCONbits 000B                      init_ram0 06EB  
                    isdigit@c 0021         __size_of_processCmdIN 024C                ?_flashAliveLED 0020  
            ??_CommandChannel 0029          ??_ProcessReadChannel 0026                      intlevel1 0000  
                   stringcode 0530            __end_of_printci_tx 06AB                   ??_printc_tx 0021  
processCmdIN@selected_channel 0044                  _processCmdIN 0027                      stringdir 0530  
                    stringtab 0530                   _processRXIN 0461            __CFG_FOSC$INTOSCIO 0000  
             i1_flashAliveLED 0713  
